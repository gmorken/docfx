{
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction",
    "keywords": "Introduction gmorken bold text Month Savings Test January $250 ett February $80 tv√• March $420 tre Heading level 3 This is the first line. And this is the second line. Loveisbold Syntax Description Header Title Paragraph Text { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } foreach (var cust in customers.Rows) { var customer = new Customer { Adress = cust.Adress == \"null\" ? null : cust.Adress, Adresstyp = cust.Adresstyp == \"null\" ? null : cust.Adresstyp, Epost = cust.Epost == \"null\" ? null : cust.Epost, Kundnr = cust.Kundnr, Namn = cust.Namn == \"null\" ? null : cust.Namn, Orgnr = cust.Orgnr == \"null\" ? null : cust.Orgnr, Postnr = cust.Postnr == \"null\" ? null : cust.Postnr, Stad = cust.Stad == \"null\" ? null : cust.Stad, Telefon = cust.Telefon == \"null\" ? null : cust.Telefon, }; custlist.Add(customer); //ctx.Customers.Add(customer); //ctx.SaveChanges(); } test üòÇ üìù Note: Sunrises are beautiful. Euro (‚Ç¨) ‚Äî ‚Ç¨ Euro (‚Ç¨) ‚Äî ‚Ç¨"
  },
  "docs/nisse.html": {
    "href": "docs/nisse.html",
    "title": "",
    "keywords": "NISSE"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "node_modules/anymatch/README.html": {
    "href": "node_modules/anymatch/README.html",
    "title": "anymatch",
    "keywords": "anymatch Javascript module to match a string against a regular expression, glob, string, or function that takes the string as an argument and returns a truthy or falsy value. The matcher can also be an array of any or all of these. Useful for allowing a very flexible user-defined config to define things like file paths. Note: This module has Bash-parity, please be aware that Windows-style backslashes are not supported as separators. See https://github.com/micromatch/micromatch#backslashes for more information. Usage npm install anymatch anymatch(matchers, testString, [returnIndex], [options]) matchers: (Array|String|RegExp|Function) String to be directly matched, string with glob patterns, regular expression test, function that takes the testString as an argument and returns a truthy value if it should be matched, or an array of any number and mix of these types. testString: (String|Array) The string to test against the matchers. If passed as an array, the first element of the array will be used as the testString for non-function matchers, while the entire array will be applied as the arguments for function matchers. options: (Object [optional]_) Any of the picomatch options. returnIndex: (Boolean [optional]) If true, return the array index of the first matcher that that testString matched, or -1 if no match, instead of a boolean result. const anymatch = require('anymatch'); const matchers = [ 'path/to/file.js', 'path/anyjs/**/*.js', /foo.js$/, string => string.includes('bar') && string.length > 10 ] ; anymatch(matchers, 'path/to/file.js'); // true anymatch(matchers, 'path/anyjs/baz.js'); // true anymatch(matchers, 'path/to/foo.js'); // true anymatch(matchers, 'path/to/bar.js'); // true anymatch(matchers, 'bar.js'); // false // returnIndex = true anymatch(matchers, 'foo.js', {returnIndex: true}); // 2 anymatch(matchers, 'path/anyjs/foo.js', {returnIndex: true}); // 1 // any picomatc // using globs to match directories and their children anymatch('node_modules', 'node_modules'); // true anymatch('node_modules', 'node_modules/somelib/index.js'); // false anymatch('node_modules/**', 'node_modules/somelib/index.js'); // true anymatch('node_modules/**', '/absolute/path/to/node_modules/somelib/index.js'); // false anymatch('**/node_modules/**', '/absolute/path/to/node_modules/somelib/index.js'); // true const matcher = anymatch(matchers); ['foo.js', 'bar.js'].filter(matcher); // [ 'foo.js' ] anymatch master* ‚ùØ anymatch(matchers) You can also pass in only your matcher(s) to get a curried function that has already been bound to the provided matching criteria. This can be used as an Array#filter callback. var matcher = anymatch(matchers); matcher('path/to/file.js'); // true matcher('path/anyjs/baz.js', true); // 1 ['foo.js', 'bar.js'].filter(matcher); // ['foo.js'] Changelog See release notes page on GitHub v3.0: Removed startIndex and endIndex arguments. Node 8.x-only. v2.0: micromatch moves away from minimatch-parity and inline with Bash. This includes handling backslashes differently (see https://github.com/micromatch/micromatch#backslashes for more information). v1.2: anymatch uses micromatch for glob pattern matching. Issues with glob pattern matching should be reported directly to the micromatch issue tracker. License ISC"
  },
  "node_modules/balanced-match/LICENSE.html": {
    "href": "node_modules/balanced-match/LICENSE.html",
    "title": "",
    "keywords": "(MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "node_modules/balanced-match/README.html": {
    "href": "node_modules/balanced-match/README.html",
    "title": "balanced-match",
    "keywords": "balanced-match Match balanced string pairs, like { and } or <b> and </b>. Supports regular expressions as well! Example Get the first matching pair of braces: var balanced = require('balanced-match'); console.log(balanced('{', '}', 'pre{in{nested}}post')); console.log(balanced('{', '}', 'pre{first}between{second}post')); console.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre { in{nest} } post')); The matches are: $ node example.js { start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' } { start: 3, end: 9, pre: 'pre', body: 'first', post: 'between{second}post' } { start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' } API var m = balanced(a, b, str) For the first non-nested matching pair of a and b in str, return an object with those keys: start the index of the first match of a end the index of the matching b pre the preamble, a and b not included body the match, a and b not included post the postscript, a and b not included If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match ['{', 'a', ''] and {a}} will match ['', 'a', '}']. var r = balanced.range(a, b, str) For the first non-nested matching pair of a and b in str, return an array with indexes: [ <a index>, <b index> ]. If there's no match, undefined will be returned. If the str contains more a than b / there are unmatched pairs, the first match that was closed will be used. For example, {{a} will match [ 1, 3 ] and {a}} will match [0, 2]. Installation With npm do: npm install balanced-match Security contact information To report a security vulnerability, please use the Tidelift security contact. Tidelift will coordinate the fix and disclosure. License (MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "node_modules/binary-extensions/readme.html": {
    "href": "node_modules/binary-extensions/readme.html",
    "title": "binary-extensions",
    "keywords": "binary-extensions List of binary file extensions The list is just a JSON file and can be used anywhere. Install npm install binary-extensions Usage const binaryExtensions = require('binary-extensions'); console.log(binaryExtensions); //=> ['3ds', '3g2', ‚Ä¶] Related is-binary-path - Check if a filepath is a binary file text-extensions - List of text file extensions"
  },
  "node_modules/brace-expansion/README.html": {
    "href": "node_modules/brace-expansion/README.html",
    "title": "brace-expansion",
    "keywords": "brace-expansion Brace expansion, as known from sh/bash, in JavaScript. Example var expand = require('brace-expansion'); expand('file-{a,b,c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('-v{,,}') // => ['-v', '-v', '-v'] expand('file{0..2}.jpg') // => ['file0.jpg', 'file1.jpg', 'file2.jpg'] expand('file-{a..c}.jpg') // => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg'] expand('file{2..0}.jpg') // => ['file2.jpg', 'file1.jpg', 'file0.jpg'] expand('file{0..4..2}.jpg') // => ['file0.jpg', 'file2.jpg', 'file4.jpg'] expand('file-{a..e..2}.jpg') // => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg'] expand('file{00..10..5}.jpg') // => ['file00.jpg', 'file05.jpg', 'file10.jpg'] expand('{{A..C},{a..c}}') // => ['A', 'B', 'C', 'a', 'b', 'c'] expand('ppp{,config,oe{,conf}}') // => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf'] API var expand = require('brace-expansion'); var expanded = expand(str) Return an array of all possible and valid expansions of str. If none are found, [str] is returned. Valid expansions are: /^(.*,)+(.+)?$/ // {a,b,...} A comma separated list of options, like {a,b} or {a,{b,c}} or {,a,}. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} A numeric sequence from x to y inclusive, with optional increment. If x or y start with a leading 0, all the numbers will be padded to have equal length. Negative numbers and backwards iteration work too. /^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/ // {x..y[..incr]} An alphabetic sequence from x to y inclusive, with optional increment. x and y must be exactly one character, and if given, incr must be a number. For compatibility reasons, the string ${ is not eligible for brace expansion. Installation With npm do: npm install brace-expansion Contributors Julian Gruber Isaac Z. Schlueter Sponsors This module is proudly supported by my Sponsors! Do you want to support modules like this to improve their quality, stability and weigh in on new features? Then please consider donating to my Patreon. Not sure how much of my modules you're using? Try feross/thanks! License (MIT) Copyright (c) 2013 Julian Gruber <julian@juliangruber.com&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "node_modules/braces/README.html": {
    "href": "node_modules/braces/README.html",
    "title": "braces",
    "keywords": "braces Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ‚ù§Ô∏è and support. Install Install with npm: $ npm install --save braces v3.0.0 Released!! See the changelog for details. Why use braces? Brace patterns make globs more powerful by adding the ability to match specific ranges and sequences of characters. Accurate - complete support for the Bash 4.3 Brace Expansion specification (passes all of the Bash braces tests) fast and performant - Starts fast, runs fast and scales well as patterns increase in complexity. Organized code base - The parser and compiler are easy to maintain and update when edge cases crop up. Well-tested - Thousands of test assertions, and passes all of the Bash, minimatch, and brace-expansion unit tests (as of the date this was written). Safer - You shouldn't have to worry about users defining aggressive or malicious brace patterns that can break your application. Braces takes measures to prevent malicious regex that can be used for DDoS attacks (see catastrophic backtracking). Supports lists - (aka \"sets\") a/{b,c}/d => ['a/b/d', 'a/c/d'] Supports sequences - (aka \"ranges\") {01..03} => ['01', '02', '03'] Supports steps - (aka \"increments\") {2..10..2} => ['2', '4', '6', '8', '10'] Supports escaping - To prevent evaluation of special characters. Usage The main export is a function that takes one or more brace patterns and options. const braces = require('braces'); // braces(patterns[, options]); console.log(braces(['{01..05}', '{a..e}'])); //=> ['(0[1-5])', '([a-e])'] console.log(braces(['{01..05}', '{a..e}'], { expand: true })); //=> ['01', '02', '03', '04', '05', 'a', 'b', 'c', 'd', 'e'] Brace Expansion vs. Compilation By default, brace patterns are compiled into strings that are optimized for creating regular expressions and matching. Compiled console.log(braces('a/{x,y,z}/b')); //=> ['a/(x|y|z)/b'] console.log(braces(['a/{01..20}/b', 'a/{1..5}/b'])); //=> [ 'a/(0[1-9]|1[0-9]|20)/b', 'a/([1-5])/b' ] Expanded Enable brace expansion by setting the expand option to true, or by using braces.expand() (returns an array similar to what you'd expect from Bash, or echo {1..5}, or minimatch): console.log(braces('a/{x,y,z}/b', { expand: true })); //=> ['a/x/b', 'a/y/b', 'a/z/b'] console.log(braces.expand('{01..10}')); //=> ['01','02','03','04','05','06','07','08','09','10'] Lists Expand lists (like Bash \"sets\"): console.log(braces('a/{foo,bar,baz}/*.js')); //=> ['a/(foo|bar|baz)/*.js'] console.log(braces.expand('a/{foo,bar,baz}/*.js')); //=> ['a/foo/*.js', 'a/bar/*.js', 'a/baz/*.js'] Sequences Expand ranges of characters (like Bash \"sequences\"): console.log(braces.expand('{1..3}')); // ['1', '2', '3'] console.log(braces.expand('a/{1..3}/b')); // ['a/1/b', 'a/2/b', 'a/3/b'] console.log(braces('{a..c}', { expand: true })); // ['a', 'b', 'c'] console.log(braces('foo/{a..c}', { expand: true })); // ['foo/a', 'foo/b', 'foo/c'] // supports zero-padded ranges console.log(braces('a/{01..03}/b')); //=> ['a/(0[1-3])/b'] console.log(braces('a/{001..300}/b')); //=> ['a/(0{2}[1-9]|0[1-9][0-9]|[12][0-9]{2}|300)/b'] See fill-range for all available range-expansion options. Steppped ranges Steps, or increments, may be used with ranges: console.log(braces.expand('{2..10..2}')); //=> ['2', '4', '6', '8', '10'] console.log(braces('{2..10..2}')); //=> ['(2|4|6|8|10)'] When the .optimize method is used, or options.optimize is set to true, sequences are passed to to-regex-range for expansion. Nesting Brace patterns may be nested. The results of each expanded string are not sorted, and left to right order is preserved. \"Expanded\" braces console.log(braces.expand('a{b,c,/{x,y}}/e')); //=> ['ab/e', 'ac/e', 'a/x/e', 'a/y/e'] console.log(braces.expand('a/{x,{1..5},y}/c')); //=> ['a/x/c', 'a/1/c', 'a/2/c', 'a/3/c', 'a/4/c', 'a/5/c', 'a/y/c'] \"Optimized\" braces console.log(braces('a{b,c,/{x,y}}/e')); //=> ['a(b|c|/(x|y))/e'] console.log(braces('a/{x,{1..5},y}/c')); //=> ['a/(x|([1-5])|y)/c'] Escaping Escaping braces A brace pattern will not be expanded or evaluted if either the opening or closing brace is escaped: console.log(braces.expand('a\\\\{d,c,b}e')); //=> ['a{d,c,b}e'] console.log(braces.expand('a{d,c,b\\\\}e')); //=> ['a{d,c,b}e'] Escaping commas Commas inside braces may also be escaped: console.log(braces.expand('a{b\\\\,c}d')); //=> ['a{b,c}d'] console.log(braces.expand('a{d\\\\,c,b}e')); //=> ['ad,ce', 'abe'] Single items Following bash conventions, a brace pattern is also not expanded when it contains a single character: console.log(braces.expand('a{b}c')); //=> ['a{b}c'] Options options.maxLength Type: Number Default: 10,000 Description: Limit the length of the input string. Useful when the input string is generated or your application allows users to pass a string, et cetera. console.log(braces('a/{b,c}/d', { maxLength: 3 })); //=> throws an error options.expand Type: Boolean Default: undefined Description: Generate an \"expanded\" brace pattern (alternatively you can use the braces.expand() method, which does the same thing). console.log(braces('a/{b,c}/d', { expand: true })); //=> [ 'a/b/d', 'a/c/d' ] options.nodupes Type: Boolean Default: undefined Description: Remove duplicates from the returned array. options.rangeLimit Type: Number Default: 1000 Description: To prevent malicious patterns from being passed by users, an error is thrown when braces.expand() is used or options.expand is true and the generated range will exceed the rangeLimit. You can customize options.rangeLimit or set it to Inifinity to disable this altogether. Examples // pattern exceeds the \"rangeLimit\", so it's optimized automatically console.log(braces.expand('{1..1000}')); //=> ['([1-9]|[1-9][0-9]{1,2}|1000)'] // pattern does not exceed \"rangeLimit\", so it's NOT optimized console.log(braces.expand('{1..100}')); //=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100'] options.transform Type: Function Default: undefined Description: Customize range expansion. Example: Transforming non-numeric values const alpha = braces.expand('x/{a..e}/y', { transform(value, index) { // When non-numeric values are passed, \"value\" is a character code. return 'foo/' + String.fromCharCode(value) + '-' + index; }, }); console.log(alpha); //=> [ 'x/foo/a-0/y', 'x/foo/b-1/y', 'x/foo/c-2/y', 'x/foo/d-3/y', 'x/foo/e-4/y' ] Example: Transforming numeric values const numeric = braces.expand('{1..5}', { transform(value) { // when numeric values are passed, \"value\" is a number return 'foo/' + value * 2; }, }); console.log(numeric); //=> [ 'foo/2', 'foo/4', 'foo/6', 'foo/8', 'foo/10' ] options.quantifiers Type: Boolean Default: undefined Description: In regular expressions, quanitifiers can be used to specify how many times a token can be repeated. For example, a{1,3} will match the letter a one to three times. Unfortunately, regex quantifiers happen to share the same syntax as Bash lists The quantifiers option tells braces to detect when regex quantifiers are defined in the given pattern, and not to try to expand them as lists. Examples const braces = require('braces'); console.log(braces('a/b{1,3}/{x,y,z}')); //=> [ 'a/b(1|3)/(x|y|z)' ] console.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true })); //=> [ 'a/b{1,3}/(x|y|z)' ] console.log(braces('a/b{1,3}/{x,y,z}', { quantifiers: true, expand: true })); //=> [ 'a/b{1,3}/x', 'a/b{1,3}/y', 'a/b{1,3}/z' ] options.keepEscaping Type: Boolean Default: undefined Description: Do not strip backslashes that were used for escaping from the result. What is \"brace expansion\"? Brace expansion is a type of parameter expansion that was made popular by unix shells for generating lists of strings, as well as regex-like matching when used alongside wildcards (globs). In addition to \"expansion\", braces are also used for matching. In other words: brace expansion is for generating new lists brace matching is for filtering existing lists More about brace expansion (click to expand) There are two main types of brace expansion: lists: which are defined using comma-separated values inside curly braces: {a,b,c} sequences: which are defined using a starting value and an ending value, separated by two dots: a{1..3}b. Optionally, a third argument may be passed to define a \"step\" or increment to use: a{1..100..10}b. These are also sometimes referred to as \"ranges\". Here are some example brace patterns to illustrate how they work: Sets {a,b,c} => a b c {a,b,c}{1,2} => a1 a2 b1 b2 c1 c2 Sequences {1..9} => 1 2 3 4 5 6 7 8 9 {4..-4} => 4 3 2 1 0 -1 -2 -3 -4 {1..20..3} => 1 4 7 10 13 16 19 {a..j} => a b c d e f g h i j {j..a} => j i h g f e d c b a {a..z..3} => a d g j m p s v y Combination Sets and sequences can be mixed together or used along with any other strings. {a,b,c}{1..3} => a1 a2 a3 b1 b2 b3 c1 c2 c3 foo/{a,b,c}/bar => foo/a/bar foo/b/bar foo/c/bar The fact that braces can be \"expanded\" from relatively simple patterns makes them ideal for quickly generating test fixtures, file paths, and similar use cases. Brace matching In addition to expansion, brace patterns are also useful for performing regular-expression-like matching. For example, the pattern foo/{1..3}/bar would match any of following strings: foo/1/bar foo/2/bar foo/3/bar But not: baz/1/qux baz/2/qux baz/3/qux Braces can also be combined with glob patterns to perform more advanced wildcard matching. For example, the pattern */{1..3}/* would match any of following strings: foo/1/bar foo/2/bar foo/3/bar baz/1/qux baz/2/qux baz/3/qux Brace matching pitfalls Although brace patterns offer a user-friendly way of matching ranges or sets of strings, there are also some major disadvantages and potential risks you should be aware of. tldr \"brace bombs\" brace expansion can eat up a huge amount of processing resources as brace patterns increase linearly in size, the system resources required to expand the pattern increase exponentially users can accidentally (or intentially) exhaust your system's resources resulting in the equivalent of a DoS attack (bonus: no programming knowledge is required!) For a more detailed explanation with examples, see the geometric complexity section. The solution Jump to the performance section to see how Braces solves this problem in comparison to other libraries. Geometric complexity At minimum, brace patterns with sets limited to two elements have quadradic or O(n^2) complexity. But the complexity of the algorithm increases exponentially as the number of sets, and elements per set, increases, which is O(n^c). For example, the following sets demonstrate quadratic (O(n^2)) complexity: {1,2}{3,4} => (2X2) => 13 14 23 24 {1,2}{3,4}{5,6} => (2X2X2) => 135 136 145 146 235 236 245 246 But add an element to a set, and we get a n-fold Cartesian product with O(n^c) complexity: {1,2,3}{4,5,6}{7,8,9} => (3X3X3) => 147 148 149 157 158 159 167 168 169 247 248 249 257 258 259 267 268 269 347 348 349 357 358 359 367 368 369 Now, imagine how this complexity grows given that each element is a n-tuple: {1..100}{1..100} => (100X100) => 10,000 elements (38.4 kB) {1..100}{1..100}{1..100} => (100X100X100) => 1,000,000 elements (5.76 MB) Although these examples are clearly contrived, they demonstrate how brace patterns can quickly grow out of control. More information Interested in learning more about brace expansion? linuxjournal/bash-brace-expansion rosettacode/Brace_expansion cartesian product Performance Braces is not only screaming fast, it's also more accurate the other brace expansion libraries. Better algorithms Fortunately there is a solution to the \"brace bomb\" problem: don't expand brace patterns into an array when they're used for matching. Instead, convert the pattern into an optimized regular expression. This is easier said than done, and braces is the only library that does this currently. The proof is in the numbers Minimatch gets exponentially slower as patterns increase in complexity, braces does not. The following results were generated using braces() and minimatch.braceExpand(), respectively. Pattern braces [minimatch][] {1..9007199254740991}[^1] 298 B (5ms 459Œºs) N/A (freezes) {1..1000000000000000} 41 B (1ms 15Œºs) N/A (freezes) {1..100000000000000} 40 B (890Œºs) N/A (freezes) {1..10000000000000} 39 B (2ms 49Œºs) N/A (freezes) {1..1000000000000} 38 B (608Œºs) N/A (freezes) {1..100000000000} 37 B (397Œºs) N/A (freezes) {1..10000000000} 35 B (983Œºs) N/A (freezes) {1..1000000000} 34 B (798Œºs) N/A (freezes) {1..100000000} 33 B (733Œºs) N/A (freezes) {1..10000000} 32 B (5ms 632Œºs) 78.89 MB (16s 388ms 569Œºs) {1..1000000} 31 B (1ms 381Œºs) 6.89 MB (1s 496ms 887Œºs) {1..100000} 30 B (950Œºs) 588.89 kB (146ms 921Œºs) {1..10000} 29 B (1ms 114Œºs) 48.89 kB (14ms 187Œºs) {1..1000} 28 B (760Œºs) 3.89 kB (1ms 453Œºs) {1..100} 22 B (345Œºs) 291 B (196Œºs) {1..10} 10 B (533Œºs) 20 B (37Œºs) {1..3} 7 B (190Œºs) 5 B (27Œºs) Faster algorithms When you need expansion, braces is still much faster. (the following results were generated using braces.expand() and minimatch.braceExpand(), respectively) Pattern braces [minimatch][] {1..10000000} 78.89 MB (2s 698ms 642Œºs) 78.89 MB (18s 601ms 974Œºs) {1..1000000} 6.89 MB (458ms 576Œºs) 6.89 MB (1s 491ms 621Œºs) {1..100000} 588.89 kB (20ms 728Œºs) 588.89 kB (156ms 919Œºs) {1..10000} 48.89 kB (2ms 202Œºs) 48.89 kB (13ms 641Œºs) {1..1000} 3.89 kB (1ms 796Œºs) 3.89 kB (1ms 958Œºs) {1..100} 291 B (424Œºs) 291 B (211Œºs) {1..10} 20 B (487Œºs) 20 B (72Œºs) {1..3} 5 B (166Œºs) 5 B (27Œºs) If you'd like to run these comparisons yourself, see test/support/generate.js. Benchmarks Running benchmarks Install dev dependencies: npm i -d && npm benchmark Latest results Braces is more accurate, without sacrificing performance. ‚óè expand - range (expanded) braces x 53,167 ops/sec ¬±0.12% (102 runs sampled) minimatch x 11,378 ops/sec ¬±0.10% (102 runs sampled) ‚óè expand - range (optimized for regex) braces x 373,442 ops/sec ¬±0.04% (100 runs sampled) minimatch x 3,262 ops/sec ¬±0.18% (100 runs sampled) ‚óè expand - nested ranges (expanded) braces x 33,921 ops/sec ¬±0.09% (99 runs sampled) minimatch x 10,855 ops/sec ¬±0.28% (100 runs sampled) ‚óè expand - nested ranges (optimized for regex) braces x 287,479 ops/sec ¬±0.52% (98 runs sampled) minimatch x 3,219 ops/sec ¬±0.28% (101 runs sampled) ‚óè expand - set (expanded) braces x 238,243 ops/sec ¬±0.19% (97 runs sampled) minimatch x 538,268 ops/sec ¬±0.31% (96 runs sampled) ‚óè expand - set (optimized for regex) braces x 321,844 ops/sec ¬±0.10% (97 runs sampled) minimatch x 140,600 ops/sec ¬±0.15% (100 runs sampled) ‚óè expand - nested sets (expanded) braces x 165,371 ops/sec ¬±0.42% (96 runs sampled) minimatch x 337,720 ops/sec ¬±0.28% (100 runs sampled) ‚óè expand - nested sets (optimized for regex) braces x 242,948 ops/sec ¬±0.12% (99 runs sampled) minimatch x 87,403 ops/sec ¬±0.79% (96 runs sampled) About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Contributors Commits Contributor 197 jonschlinkert 4 doowb 1 es128 1 eush77 1 hemanth 1 wtgtybhertgeghgtwtg Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright ¬© 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on April 08, 2019."
  },
  "node_modules/chokidar/README.html": {
    "href": "node_modules/chokidar/README.html",
    "title": "Chokidar",
    "keywords": "Chokidar Minimal and efficient cross-platform file watching library Why? Node.js fs.watch: Doesn't report filenames on MacOS. Doesn't report events at all when using editors like Sublime on MacOS. Often reports events twice. Emits most changes as rename. Does not provide an easy way to recursively watch file trees. Does not support recursive watching on Linux. Node.js fs.watchFile: Almost as bad at event handling. Also does not provide any recursive watching. Results in high CPU utilization. Chokidar resolves these problems. Initially made for Brunch (an ultra-swift web app build tool), it is now used in Microsoft's Visual Studio Code, gulp, karma, PM2, browserify, webpack, BrowserSync, and many others. It has proven itself in production environments. Version 3 is out! Check out our blog post about it: Chokidar 3: How to save 32TB of traffic every week How? Chokidar does still rely on the Node.js core fs module, but when using fs.watch and fs.watchFile for watching, it normalizes the events it receives, often checking for truth by getting file stats and/or dir contents. On MacOS, chokidar by default uses a native extension exposing the Darwin FSEvents API. This provides very efficient recursive watching compared with implementations like kqueue available on most *nix platforms. Chokidar still does have to do some work to normalize the events received that way as well. On most other platforms, the fs.watch-based implementation is the default, which avoids polling and keeps CPU usage down. Be advised that chokidar will initiate watchers recursively for everything within scope of the paths that have been specified, so be judicious about not wasting system resources by watching much more than needed. Getting started Install with npm: npm install chokidar Then require and use it in your code: const chokidar = require('chokidar'); // One-liner for current directory chokidar.watch('.').on('all', (event, path) => { console.log(event, path); }); API // Example of a more typical implementation structure // Initialize watcher. const watcher = chokidar.watch('file, dir, glob, or array', { ignored: /(^|[\\/\\\\])\\../, // ignore dotfiles persistent: true }); // Something to use when events are received. const log = console.log.bind(console); // Add event listeners. watcher .on('add', path => log(`File ${path} has been added`)) .on('change', path => log(`File ${path} has been changed`)) .on('unlink', path => log(`File ${path} has been removed`)); // More possible events. watcher .on('addDir', path => log(`Directory ${path} has been added`)) .on('unlinkDir', path => log(`Directory ${path} has been removed`)) .on('error', error => log(`Watcher error: ${error}`)) .on('ready', () => log('Initial scan complete. Ready for changes')) .on('raw', (event, path, details) => { // internal log('Raw event info:', event, path, details); }); // 'add', 'addDir' and 'change' events also receive stat() results as second // argument when available: https://nodejs.org/api/fs.html#fs_class_fs_stats watcher.on('change', (path, stats) => { if (stats) console.log(`File ${path} changed size to ${stats.size}`); }); // Watch new files. watcher.add('new-file'); watcher.add(['new-file-2', 'new-file-3', '**/other-file*']); // Get list of actual paths being watched on the filesystem var watchedPaths = watcher.getWatched(); // Un-watch some files. await watcher.unwatch('new-file*'); // Stop watching. // The method is async! watcher.close().then(() => console.log('closed')); // Full list of options. See below for descriptions. // Do not use this example! chokidar.watch('file', { persistent: true, ignored: '*.txt', ignoreInitial: false, followSymlinks: true, cwd: '.', disableGlobbing: false, usePolling: false, interval: 100, binaryInterval: 300, alwaysStat: false, depth: 99, awaitWriteFinish: { stabilityThreshold: 2000, pollInterval: 100 }, ignorePermissionErrors: false, atomic: true // or a custom 'atomicity delay', in milliseconds (default 100) }); chokidar.watch(paths, [options]) paths (string or array of strings). Paths to files, dirs to be watched recursively, or glob patterns. Note: globs must not contain windows separators (\\), because that's how they work by the standard ‚Äî you'll need to replace them with forward slashes (/). Note 2: for additional glob documentation, check out low-level library: picomatch. options (object) Options object as defined below: Persistence persistent (default: true). Indicates whether the process should continue to run as long as files are being watched. If set to false when using fsevents to watch, no more events will be emitted after ready, even if the process continues to run. Path filtering ignored (anymatch-compatible definition) Defines files/paths to be ignored. The whole relative or absolute path is tested, not just filename. If a function with two arguments is provided, it gets called twice per path - once with a single argument (the path), second time with two arguments (the path and the fs.Stats object of that path). ignoreInitial (default: false). If set to false then add/addDir events are also emitted for matching paths while instantiating the watching as chokidar discovers these file paths (before the ready event). followSymlinks (default: true). When false, only the symlinks themselves will be watched for changes instead of following the link references and bubbling events through the link's path. cwd (no default). The base directory from which watch paths are to be derived. Paths emitted with events will be relative to this. disableGlobbing (default: false). If set to true then the strings passed to .watch() and .add() are treated as literal path names, even if they look like globs. Performance usePolling (default: false). Whether to use fs.watchFile (backed by polling), or fs.watch. If polling leads to high CPU utilization, consider setting this to false. It is typically necessary to set this to true to successfully watch files over a network, and it may be necessary to successfully watch files in other non-standard situations. Setting to true explicitly on MacOS overrides the useFsEvents default. You may also set the CHOKIDAR_USEPOLLING env variable to true (1) or false (0) in order to override this option. Polling-specific settings (effective when usePolling: true) interval (default: 100). Interval of file system polling, in milliseconds. You may also set the CHOKIDAR_INTERVAL env variable to override this option. binaryInterval (default: 300). Interval of file system polling for binary files. (see list of binary extensions) useFsEvents (default: true on MacOS). Whether to use the fsevents watching interface if available. When set to true explicitly and fsevents is available this supercedes the usePolling setting. When set to false on MacOS, usePolling: true becomes the default. alwaysStat (default: false). If relying upon the fs.Stats object that may get passed with add, addDir, and change events, set this to true to ensure it is provided even in cases where it wasn't already available from the underlying watch events. depth (default: undefined). If set, limits how many levels of subdirectories will be traversed. awaitWriteFinish (default: false). By default, the add event will fire when a file first appears on disk, before the entire file has been written. Furthermore, in some cases some change events will be emitted while the file is being written. In some cases, especially when watching for large files there will be a need to wait for the write operation to finish before responding to a file creation or modification. Setting awaitWriteFinish to true (or a truthy value) will poll file size, holding its add and change events until the size does not change for a configurable amount of time. The appropriate duration setting is heavily dependent on the OS and hardware. For accurate detection this parameter should be relatively high, making file watching much less responsive. Use with caution. options.awaitWriteFinish can be set to an object in order to adjust timing params: awaitWriteFinish.stabilityThreshold (default: 2000). Amount of time in milliseconds for a file size to remain constant before emitting its event. awaitWriteFinish.pollInterval (default: 100). File size polling interval, in milliseconds. Errors ignorePermissionErrors (default: false). Indicates whether to watch files that don't have read permissions if possible. If watching fails due to EPERM or EACCES with this set to true, the errors will be suppressed silently. atomic (default: true if useFsEvents and usePolling are false). Automatically filters out artifacts that occur when using editors that use \"atomic writes\" instead of writing directly to the source file. If a file is re-added within 100 ms of being deleted, Chokidar emits a change event rather than unlink then add. If the default of 100 ms does not work well for you, you can override it by setting atomic to a custom value, in milliseconds. Methods & Events chokidar.watch() produces an instance of FSWatcher. Methods of FSWatcher: .add(path / paths): Add files, directories, or glob patterns for tracking. Takes an array of strings or just one string. .on(event, callback): Listen for an FS event. Available events: add, addDir, change, unlink, unlinkDir, ready, raw, error. Additionally all is available which gets emitted with the underlying event name and path for every event other than ready, raw, and error. raw is internal, use it carefully. .unwatch(path / paths): Stop watching files, directories, or glob patterns. Takes an array of strings or just one string. .close(): async Removes all listeners from watched files. Asynchronous, returns Promise. Use with await to ensure bugs don't happen. .getWatched(): Returns an object representing all the paths on the file system being watched by this FSWatcher instance. The object's keys are all the directories (using absolute paths unless the cwd option was used), and the values are arrays of the names of the items contained in each directory. CLI If you need a CLI interface for your file watching, check out chokidar-cli, allowing you to execute a command on each change, or get a stdio stream of change events. Install Troubleshooting npm WARN optional dep failed, continuing fsevents@n.n.n This message is normal part of how npm handles optional dependencies and is not indicative of a problem. Even if accompanied by other related error messages, Chokidar should function properly. TypeError: fsevents is not a constructor Update chokidar by doing rm -rf node_modules package-lock.json yarn.lock && npm install, or update your dependency that uses chokidar. Chokidar is producing ENOSP error on Linux, like this: bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell Error: watch /home/ ENOSPC This means Chokidar ran out of file handles and you'll need to increase their count by executing the following command in Terminal: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p Changelog For more detailed changelog, see full_changelog.md. v3.5 (Jan 6, 2021): Support for ARM Macs with Apple Silicon. Fixes for deleted symlinks. v3.4 (Apr 26, 2020): Support for directory-based symlinks. Fixes for macos file replacement. v3.3 (Nov 2, 2019): FSWatcher#close() method became async. That fixes IO race conditions related to close method. v3.2 (Oct 1, 2019): Improve Linux RAM usage by 50%. Race condition fixes. Windows glob fixes. Improve stability by using tight range of dependency versions. v3.1 (Sep 16, 2019): dotfiles are no longer filtered out by default. Use ignored option if needed. Improve initial Linux scan time by 50%. v3 (Apr 30, 2019): massive CPU & RAM consumption improvements; reduces deps / package size by a factor of 17x and bumps Node.js requirement to v8.16 and higher. v2 (Dec 29, 2017): Globs are now posix-style-only; without windows support. Tons of bugfixes. v1 (Apr 7, 2015): Glob support, symlink support, tons of bugfixes. Node 0.8+ is supported v0.1 (Apr 20, 2012): Initial release, extracted from Brunch Also Why was chokidar named this way? What's the meaning behind it? Chowkidar is a transliteration of a Hindi word meaning 'watchman, gatekeeper', ‡§ö‡•å‡§ï‡•Ä‡§¶‡§æ‡§∞. This ultimately comes from Sanskrit _ ‡§ö‡§§‡•Å‡§∑‡•ç‡§ï_ (crossway, quadrangle, consisting-of-four). This word is also used in other languages like Urdu as (⁄ÜŸà⁄©€åÿØÿßÿ±) which is widely used in Pakistan and India. License MIT (c) Paul Miller (https://paulmillr.com), see LICENSE file."
  },
  "node_modules/debug/CHANGELOG.html": {
    "href": "node_modules/debug/CHANGELOG.html",
    "title": "3.1.0 / 2017-09-26",
    "keywords": "3.1.0 / 2017-09-26 Add DEBUG_HIDE_DATE env var (#486) Remove ReDoS regexp in %o formatter (#504) Remove \"component\" from package.json Remove component.json Ignore package-lock.json Examples: fix colors printout Fix: browser detection Fix: spelling mistake (#496, @EdwardBetts) 3.0.1 / 2017-08-24 Fix: Disable colors in Edge and Internet Explorer (#489) 3.0.0 / 2017-08-08 Breaking: Remove DEBUG_FD (#406) Breaking: Use Date#toISOString() instead to Date#toUTCString() when output is not a TTY (#418) Breaking: Make millisecond timer namespace specific and allow 'always enabled' output (#408) Addition: document enabled flag (#465) Addition: add 256 colors mode (#481) Addition: enabled() updates existing debug instances, add destroy() function (#440) Update: component: update \"ms\" to v2.0.0 Update: separate the Node and Browser tests in Travis-CI Update: refactor Readme, fixed documentation, added \"Namespace Colors\" section, redid screenshots Update: separate Node.js and web browser examples for organization Update: update \"browserify\" to v14.4.0 Fix: fix Readme typo (#473) 2.6.9 / 2017-09-22 remove ReDoS regexp in %o formatter (#504) 2.6.8 / 2017-05-18 Fix: Check for undefined on browser globals (#462, @marbemac) 2.6.7 / 2017-05-16 Fix: Update ms to 2.0.0 to fix regular expression denial of service vulnerability (#458, @hubdotcom) Fix: Inline extend function in node implementation (#452, @dougwilson) Docs: Fix typo (#455, @msasad) 2.6.5 / 2017-04-27 Fix: null reference check on window.documentElement.style.WebkitAppearance (#447, @thebigredgeek) Misc: clean up browser reference checks (#447, @thebigredgeek) Misc: add npm-debug.log to .gitignore (@thebigredgeek) 2.6.4 / 2017-04-20 Fix: bug that would occur if process.env.DEBUG is a non-string value. (#444, @LucianBuzzo) Chore: ignore bower.json in npm installations. (#437, @joaovieira) Misc: update \"ms\" to v0.7.3 (@tootallnate) 2.6.3 / 2017-03-13 Fix: Electron reference to process.env.DEBUG (#431, @paulcbetts) Docs: Changelog fix (@thebigredgeek) 2.6.2 / 2017-03-10 Fix: DEBUG_MAX_ARRAY_LENGTH (#420, @slavaGanzin) Docs: Add backers and sponsors from Open Collective (#422, @piamancini) Docs: Add Slackin invite badge (@tootallnate) 2.6.1 / 2017-02-10 Fix: Module's export default syntax fix for IE8 Expected identifier error Fix: Whitelist DEBUG_FD for values 1 and 2 only (#415, @pi0) Fix: IE8 \"Expected identifier\" error (#414, @vgoma) Fix: Namespaces would not disable once enabled (#409, @musikov) 2.6.0 / 2016-12-28 Fix: added better null pointer checks for browser useColors (@thebigredgeek) Improvement: removed explicit window.debug export (#404, @tootallnate) Improvement: deprecated DEBUG_FD environment variable (#405, @tootallnate) 2.5.2 / 2016-12-25 Fix: reference error on window within webworkers (#393, @KlausTrainer) Docs: fixed README typo (#391, @lurch) Docs: added notice about v3 api discussion (@thebigredgeek) 2.5.1 / 2016-12-20 Fix: babel-core compatibility 2.5.0 / 2016-12-20 Fix: wrong reference in bower file (@thebigredgeek) Fix: webworker compatibility (@thebigredgeek) Fix: output formatting issue (#388, @kribblo) Fix: babel-loader compatibility (#383, @escwald) Misc: removed built asset from repo and publications (@thebigredgeek) Misc: moved source files to /src (#378, @yamikuronue) Test: added karma integration and replaced babel with browserify for browser tests (#378, @yamikuronue) Test: coveralls integration (#378, @yamikuronue) Docs: simplified language in the opening paragraph (#373, @yamikuronue) 2.4.5 / 2016-12-17 Fix: navigator undefined in Rhino (#376, @jochenberger) Fix: custom log function (#379, @hsiliev) Improvement: bit of cleanup + linting fixes (@thebigredgeek) Improvement: rm non-maintainted dist/ dir (#375, @freewil) Docs: simplified language in the opening paragraph. (#373, @yamikuronue) 2.4.4 / 2016-12-14 Fix: work around debug being loaded in preload scripts for electron (#368, @paulcbetts) 2.4.3 / 2016-12-14 Fix: navigation.userAgent error for react native (#364, @escwald) 2.4.2 / 2016-12-14 Fix: browser colors (#367, @tootallnate) Misc: travis ci integration (@thebigredgeek) Misc: added linting and testing boilerplate with sanity check (@thebigredgeek) 2.4.1 / 2016-12-13 Fix: typo that broke the package (#356) 2.4.0 / 2016-12-13 Fix: bower.json references unbuilt src entry point (#342, @justmatt) Fix: revert \"handle regex special characters\" (@tootallnate) Feature: configurable util.inspect()`options for NodeJS (#327, @tootallnate) Feature: %O`(big O) pretty-prints objects (#322, @tootallnate) Improvement: allow colors in workers (#335, @botverse) Improvement: use same color for same namespace. (#338, @lchenay) 2.3.3 / 2016-11-09 Fix: Catch JSON.stringify() errors (#195, Jovan Alleyne) Fix: Returning localStorage saved values (#331, Levi Thomason) Improvement: Don't create an empty object when no process (Nathan Rajlich) 2.3.2 / 2016-11-09 Fix: be super-safe in index.js as well (@TooTallNate) Fix: should check whether process exists (Tom Newby) 2.3.1 / 2016-11-09 Fix: Added electron compatibility (#324, @paulcbetts) Improvement: Added performance optimizations (@tootallnate) Readme: Corrected PowerShell environment variable example (#252, @gimre) Misc: Removed yarn lock file from source control (#321, @fengmk2) 2.3.0 / 2016-11-07 Fix: Consistent placement of ms diff at end of output (#215, @gorangajic) Fix: Escaping of regex special characters in namespace strings (#250, @zacronos) Fix: Fixed bug causing crash on react-native (#282, @vkarpov15) Feature: Enabled ES6+ compatible import via default export (#212 @bucaran) Feature: Added %O formatter to reflect Chrome's console.log capability (#279, @oncletom) Package: Update \"ms\" to 0.7.2 (#315, @DevSide) Package: removed superfluous version property from bower.json (#207 @kkirsche) Readme: fix USE_COLORS to DEBUG_COLORS Readme: Doc fixes for format string sugar (#269, @mlucool) Readme: Updated docs for DEBUG_FD and DEBUG_COLORS environment variables (#232, @mattlyons0) Readme: doc fixes for PowerShell (#271 #243, @exoticknight @unreadable) Readme: better docs for browser support (#224, @matthewmueller) Tooling: Added yarn integration for development (#317, @thebigredgeek) Misc: Renamed History.md to CHANGELOG.md (@thebigredgeek) Misc: Added license file (#226 #274, @CantemoInternal @sdaitzman) Misc: Updated contributors (@thebigredgeek) 2.2.0 / 2015-05-09 package: update \"ms\" to v0.7.1 (#202, @dougwilson) README: add logging to file example (#193, @DanielOchoa) README: fixed a typo (#191, @amir-s) browser: expose storage (#190, @stephenmathieson) Makefile: add a distclean target (#189, @stephenmathieson) 2.1.3 / 2015-03-13 Updated stdout/stderr example (#186) Updated example/stdout.js to match debug current behaviour Renamed example/stderr.js to stdout.js Update Readme.md (#184) replace high intensity foreground color for bold (#182, #183) 2.1.2 / 2015-03-01 dist: recompile update \"ms\" to v0.7.0 package: update \"browserify\" to v9.0.3 component: fix \"ms.js\" repo location changed bower package name updated documentation about using debug in a browser fix: security error on safari (#167, #168, @yields) 2.1.1 / 2014-12-29 browser: use typeof to check for console existence browser: check for console.log truthiness (fix IE 8/9) browser: add support for Chrome apps Readme: added Windows usage remarks Add bower.json to properly support bower install 2.1.0 / 2014-10-15 node: implement DEBUG_FD env variable support package: update \"browserify\" to v6.1.0 package: add \"license\" field to package.json (#135, @panuhorsmalahti) 2.0.0 / 2014-09-01 package: update \"browserify\" to v5.11.0 node: use stderr rather than stdout for logging (#29, @stephenmathieson) 1.0.4 / 2014-07-15 dist: recompile example: remove console.info() log usage example: add \"Content-Type\" UTF-8 header to browser example browser: place %c marker after the space character browser: reset the \"content\" color via color: inherit browser: add colors support for Firefox >= v31 debug: prefer an instance log() function over the global one (#119) Readme: update documentation about styled console logs for FF v31 (#116, @wryk) 1.0.3 / 2014-07-09 Add support for multiple wildcards in namespaces (#122, @seegno) browser: fix lint 1.0.2 / 2014-06-10 browser: update color palette (#113, @gscottolson) common: make console logging function configurable (#108, @timoxley) node: fix %o colors on old node <= 0.8.x Makefile: find node path using shell/which (#109, @timoxley) 1.0.1 / 2014-06-06 browser: use removeItem() to clear localStorage browser, node: don't set DEBUG if namespaces is undefined (#107, @leedm777) package: add \"contributors\" section node: fix comment typo README: list authors 1.0.0 / 2014-06-04 make ms diff be global, not be scope debug: ignore empty strings in enable() node: make DEBUG_COLORS able to disable coloring *: export the colors array npmignore: don't publish the dist dir Makefile: refactor to use browserify package: add \"browserify\" as a dev dependency Readme: add Web Inspector Colors section node: reset terminal color for the debug content node: map \"%o\" to util.inspect() browser: map \"%j\" to JSON.stringify() debug: add custom \"formatters\" debug: use \"ms\" module for humanizing the diff Readme: add \"bash\" syntax highlighting browser: add Firebug color support browser: add colors for WebKit browsers node: apply log to console rewrite: abstract common logic for Node & browsers add .jshintrc file 0.8.1 / 2014-04-14 package: re-add the \"component\" section 0.8.0 / 2014-03-30 add enable() method for nodejs. Closes #27 change from stderr to stdout remove unnecessary index.js file 0.7.4 / 2013-11-13 remove \"browserify\" key from package.json (fixes something in browserify) 0.7.3 / 2013-10-30 fix: catch localStorage security error when cookies are blocked (Chrome) add debug(err) support. Closes #46 add .browser prop to package.json. Closes #42 0.7.2 / 2013-02-06 fix package.json fix: Mobile Safari (private mode) is broken with debug fix: Use unicode to send escape character to shell instead of octal to work with strict mode javascript 0.7.1 / 2013-02-05 add repository URL to package.json add DEBUG_COLORED to force colored output add browserify support fix component. Closes #24 0.7.0 / 2012-05-04 Added .component to package.json Added debug.component.js build 0.6.0 / 2012-03-16 Added support for \"-\" prefix in DEBUG [Vinay Pulim] Added .enabled flag to the node version [TooTallNate] 0.5.0 / 2012-02-02 Added: humanize diffs. Closes #8 Added debug.disable() to the CS variant Removed padding. Closes #10 Fixed: persist client-side variant again. Closes #9 0.4.0 / 2012-02-01 Added browser variant support for older browsers [TooTallNate] Added debug.enable('project:*') to browser variant [TooTallNate] Added padding to diff (moved it to the right) 0.3.0 / 2012-01-26 Added millisecond diff when isatty, otherwise UTC string 0.2.0 / 2012-01-22 Added wildcard support 0.1.0 / 2011-12-02 Added: remove colors unless stderr isatty [TooTallNate] 0.0.1 / 2010-01-03 Initial release"
  },
  "node_modules/debug/README.html": {
    "href": "node_modules/debug/README.html",
    "title": "debug",
    "keywords": "debug A tiny JavaScript debugging utility modelled after Node.js core's debugging technique. Works in Node.js and web browsers. Installation $ npm install debug Usage debug exposes a function; simply pass this function the name of your module, and it will return a decorated version of console.error for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole. Example app.js: var debug = require('debug')('http') , http = require('http') , name = 'My App'; // fake app debug('booting %o', name); http.createServer(function(req, res){ debug(req.method + ' ' + req.url); res.end('hello\\n'); }).listen(3000, function(){ debug('listening'); }); // fake worker of some kind require('./worker'); Example worker.js: var a = require('debug')('worker:a') , b = require('debug')('worker:b'); function work() { a('doing lots of uninteresting work'); setTimeout(work, Math.random() * 1000); } work(); function workb() { b('doing some work'); setTimeout(workb, Math.random() * 2000); } workb(); The DEBUG environment variable is then used to enable these based on space or comma-delimited names. Here are some examples: Windows command prompt notes CMD On Windows the environment variable is set using the set command. set DEBUG=*,-not_this Example: set DEBUG=* & node app.js PowerShell (VS Code default) PowerShell uses different syntax to set environment variables. $env:DEBUG = \"*,-not_this\" Example: $env:DEBUG='app';node app.js Then, run the program to be debugged as usual. npm script example: \"windowsDebug\": \"@powershell -Command $env:DEBUG='*';node app.js\", Namespace Colors Every debug instance has a color generated for it based on its namespace name. This helps when visually parsing the debug output to identify which debug instance a debug line belongs to. Node.js In Node.js, colors are enabled when stderr is a TTY. You also should install the supports-color module alongside debug, otherwise debug will only use a small handful of basic colors. Web Browser Colors are also enabled on \"Web Inspectors\" that understand the %c formatting option. These are WebKit web inspectors, Firefox (since version 31) and the Firebug plugin for Firefox (any version). Millisecond diff When actively developing an application it can be useful to see when the time spent between one debug() call and the next. Suppose for example you invoke debug() before requesting a resource, and after as well, the \"+NNNms\" will show you how much time was spent between calls. When stdout is not a TTY, Date#toISOString() is used, making it more useful for logging the debug information as shown below: Conventions If you're using this in one or more of your libraries, you should use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you should prefix them with your library name and use \":\" to separate features. For example \"bodyParser\" from Connect would then be \"connect:bodyParser\". If you append a \"*\" to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable. You can then use it for normal output as well as debug output. Wildcards The * character may be used as a wildcard. Suppose for example your library has debuggers named \"connect:bodyParser\", \"connect:compress\", \"connect:session\", instead of listing all three with DEBUG=connect:bodyParser,connect:compress,connect:session, you may simply do DEBUG=connect:*, or to run everything using this module simply use DEBUG=*. You can also exclude specific debuggers by prefixing them with a \"-\" character. For example, DEBUG=*,-connect:* would include all debuggers except those starting with \"connect:\". Environment Variables When running through Node.js, you can set a few environment variables that will change the behavior of the debug logging: Name Purpose DEBUG Enables/disables specific debugging namespaces. DEBUG_HIDE_DATE Hide date from debug output (non-TTY). DEBUG_COLORS Whether or not to use colors in the debug output. DEBUG_DEPTH Object inspection depth. DEBUG_SHOW_HIDDEN Shows hidden properties on inspected objects. Note: The environment variables beginning with DEBUG_ end up being converted into an Options object that gets used with %o/%O formatters. See the Node.js documentation for util.inspect() for the complete list. Formatters Debug uses printf-style formatting. Below are the officially supported formatters: Formatter Representation %O Pretty-print an Object on multiple lines. %o Pretty-print an Object all on a single line. %s String. %d Number (both integer and float). %j JSON. Replaced with the string '[Circular]' if the argument contains circular references. %% Single percent sign ('%'). This does not consume an argument. Custom formatters You can add custom formatters by extending the debug.formatters object. For example, if you wanted to add support for rendering a Buffer as hex with %h, you could do something like: const createDebug = require('debug') createDebug.formatters.h = (v) => { return v.toString('hex') } // ‚Ä¶elsewhere const debug = createDebug('foo') debug('this is hex: %h', new Buffer('hello world')) // foo this is hex: 68656c6c6f20776f726c6421 +0ms Browser Support You can build a browser-ready script using browserify, or just use the browserify-as-a-service build, if you don't want to build it yourself. Debug's enable state is currently persisted by localStorage. Consider the situation shown below where you have worker:a and worker:b, and wish to debug both. You can enable this using localStorage.debug: localStorage.debug = 'worker:*' And then refresh the page. a = debug('worker:a'); b = debug('worker:b'); setInterval(function(){ a('doing some work'); }, 1000); setInterval(function(){ b('doing some work'); }, 1200); Output streams By default debug will log to stderr, however this can be configured per-namespace by overriding the log method: Example stdout.js: var debug = require('debug'); var error = debug('app:error'); // by default stderr is used error('goes to stderr!'); var log = debug('app:log'); // set this namespace to log via console.log log.log = console.log.bind(console); // don't forget to bind to console! log('goes to stdout'); error('still goes to stderr!'); // set all output to go via console.info // overrides all per-namespace log settings debug.log = console.info.bind(console); error('now goes to stdout via console.info'); log('still goes to stdout, but via console.info now'); Extend You can simply extend debugger const log = require('debug')('auth'); //creates new debug instance with extended namespace const logSign = log.extend('sign'); const logLogin = log.extend('login'); log('hello'); // auth hello logSign('hello'); //auth:sign hello logLogin('hello'); //auth:login hello Set dynamically You can also enable debug dynamically by calling the enable() method : let debug = require('debug'); console.log(1, debug.enabled('test')); debug.enable('test'); console.log(2, debug.enabled('test')); debug.disable(); console.log(3, debug.enabled('test')); print : 1 false 2 true 3 false Usage : enable(namespaces) namespaces can include modes separated by a colon and wildcards. Note that calling enable() completely overrides previously set DEBUG variable : $ DEBUG=foo node -e 'var dbg = require(\"debug\"); dbg.enable(\"bar\"); console.log(dbg.enabled(\"foo\"))' => false Checking whether a debug target is enabled After you've created a debug instance, you can determine whether or not it is enabled by checking the enabled property: const debug = require('debug')('http'); if (debug.enabled) { // do stuff... } You can also manually toggle this property to force the debug instance to be enabled or disabled. Authors TJ Holowaychuk Nathan Rajlich Andrew Rhyne Backers Support us with a monthly donation and help us continue our activities. [Become a backer] Sponsors Become a sponsor and get your logo on our README on Github with a link to your site. [Become a sponsor] License (The MIT License) Copyright (c) 2014-2017 TJ Holowaychuk <tj@vision-media.ca&gt; Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "node_modules/fill-range/README.html": {
    "href": "node_modules/fill-range/README.html",
    "title": "fill-range",
    "keywords": "fill-range Fill in a range of numbers or letters, optionally passing an increment or step to use, or create a regex-compatible range with options.toRegex Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ‚ù§Ô∏è and support. Install Install with npm: $ npm install --save fill-range Usage Expands numbers and letters, optionally using a step as the last argument. (Numbers may be defined as JavaScript numbers or strings). const fill = require('fill-range'); // fill(from, to[, step, options]); console.log(fill('1', '10')); //=> ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] console.log(fill('1', '10', { toRegex: true })); //=> [1-9]|10 Params from: {String|Number} the number or letter to start with to: {String|Number} the number or letter to end with step: {String|Number|Object|Function} Optionally pass a step to use. options: {Object|Function}: See all available options Examples By default, an array of values is returned. Alphabetical ranges console.log(fill('a', 'e')); //=> ['a', 'b', 'c', 'd', 'e'] console.log(fill('A', 'E')); //=> [ 'A', 'B', 'C', 'D', 'E' ] Numerical ranges Numbers can be defined as actual numbers or strings. console.log(fill(1, 5)); //=> [ 1, 2, 3, 4, 5 ] console.log(fill('1', '5')); //=> [ 1, 2, 3, 4, 5 ] Negative ranges Numbers can be defined as actual numbers or strings. console.log(fill('-5', '-1')); //=> [ '-5', '-4', '-3', '-2', '-1' ] console.log(fill('-5', '5')); //=> [ '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5' ] Steps (increments) // numerical ranges with increments console.log(fill('0', '25', 4)); //=> [ '0', '4', '8', '12', '16', '20', '24' ] console.log(fill('0', '25', 5)); //=> [ '0', '5', '10', '15', '20', '25' ] console.log(fill('0', '25', 6)); //=> [ '0', '6', '12', '18', '24' ] // alphabetical ranges with increments console.log(fill('a', 'z', 4)); //=> [ 'a', 'e', 'i', 'm', 'q', 'u', 'y' ] console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ] console.log(fill('a', 'z', 6)); //=> [ 'a', 'g', 'm', 's', 'y' ] Options options.step Type: number (formatted as a string or number) Default: undefined Description: The increment to use for the range. Can be used with letters or numbers. Example(s) // numbers console.log(fill('1', '10', 2)); //=> [ '1', '3', '5', '7', '9' ] console.log(fill('1', '10', 3)); //=> [ '1', '4', '7', '10' ] console.log(fill('1', '10', 4)); //=> [ '1', '5', '9' ] // letters console.log(fill('a', 'z', 5)); //=> [ 'a', 'f', 'k', 'p', 'u', 'z' ] console.log(fill('a', 'z', 7)); //=> [ 'a', 'h', 'o', 'v' ] console.log(fill('a', 'z', 9)); //=> [ 'a', 'j', 's' ] options.strictRanges Type: boolean Default: false Description: By default, null is returned when an invalid range is passed. Enable this option to throw a RangeError on invalid ranges. Example(s) The following are all invalid: fill('1.1', '2'); // decimals not supported in ranges fill('a', '2'); // incompatible range values fill(1, 10, 'foo'); // invalid \"step\" argument options.stringify Type: boolean Default: undefined Description: Cast all returned values to strings. By default, integers are returned as numbers. Example(s) console.log(fill(1, 5)); //=> [ 1, 2, 3, 4, 5 ] console.log(fill(1, 5, { stringify: true })); //=> [ '1', '2', '3', '4', '5' ] options.toRegex Type: boolean Default: undefined Description: Create a regex-compatible source string, instead of expanding values to an array. Example(s) // alphabetical range console.log(fill('a', 'e', { toRegex: true })); //=> '[a-e]' // alphabetical with step console.log(fill('a', 'z', 3, { toRegex: true })); //=> 'a|d|g|j|m|p|s|v|y' // numerical range console.log(fill('1', '100', { toRegex: true })); //=> '[1-9]|[1-9][0-9]|100' // numerical range with zero padding console.log(fill('000001', '100000', { toRegex: true })); //=> '0{5}[1-9]|0{4}[1-9][0-9]|0{3}[1-9][0-9]{2}|0{2}[1-9][0-9]{3}|0[1-9][0-9]{4}|100000' options.transform Type: function Default: undefined Description: Customize each value in the returned array (or string). (you can also pass this function as the last argument to fill()). Example(s) // add zero padding console.log(fill(1, 5, value => String(value).padStart(4, '0'))); //=> ['0001', '0002', '0003', '0004', '0005'] About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Contributors Commits Contributor 116 jonschlinkert 4 paulmillr 2 realityking 2 bluelovers 1 edorivai 1 wtgtybhertgeghgtwtg Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile Please consider supporting me on Patreon, or start your own Patreon page! License Copyright ¬© 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on April 08, 2019."
  },
  "node_modules/glob-parent/CHANGELOG.html": {
    "href": "node_modules/glob-parent/CHANGELOG.html",
    "title": "",
    "keywords": "5.1.2 (2021-03-06) Bug Fixes eliminate ReDoS (#36) (f923116) 5.1.1 (2021-01-27) Bug Fixes unescape exclamation mark (#26) (a98874f) 5.1.0 (2021-01-27) Features add flipBackslashes option to disable auto conversion of slashes (closes #24) (#25) (eecf91d) 5.0.0 (2021-01-27) ‚ö† BREAKING CHANGES Drop support for node <6 & bump dependencies Miscellaneous Chores Drop support for node <6 & bump dependencies (896c0c0) 4.0.0 (2021-01-27) ‚ö† BREAKING CHANGES question marks are valid path characters on Windows so avoid flagging as a glob when alone Update is-glob dependency Features hoist regexps and strings for performance gains (4a80667) question marks are valid path characters on Windows so avoid flagging as a glob when alone (2a551dd) Update is-glob dependency (e41fcd8) 3.1.0 (2021-01-27) Features allow basic win32 backslash use (272afa5) handle extglobs (parentheses) containing separators (7db1bdb) new approach to braces/brackets handling (8269bd8) pre-process braces/brackets sections (9ef8a87) preserve escaped brace/bracket at end of string (8cfb0ba) Bug Fixes trailing escaped square brackets (99ec9fe) 3.0.1 (2021-01-27) Features use path-dirname ponyfill (cdbea5f) Bug Fixes unescape glob-escaped dirnames on output (598c533) 3.0.0 (2021-01-27) ‚ö† BREAKING CHANGES update is-glob dependency Features update is-glob dependency (5c5f8ef) 2.0.0 (2021-01-27) Features move up to dirname regardless of glob characters (f97fb83) 1.3.0 (2021-01-27) 1.2.0 (2021-01-27) Reverts feat: make regex test strings smaller (dc80fa9) 1.1.0 (2021-01-27) Features make regex test strings smaller (cd83220) 1.0.0 (2021-01-27)"
  },
  "node_modules/glob-parent/README.html": {
    "href": "node_modules/glob-parent/README.html",
    "title": "glob-parent",
    "keywords": "glob-parent Extract the non-magic parent path from a glob string. Usage var globParent = require('glob-parent'); globParent('path/to/*.js'); // 'path/to' globParent('/root/path/to/*.js'); // '/root/path/to' globParent('/*.js'); // '/' globParent('*.js'); // '.' globParent('**/*.js'); // '.' globParent('path/{to,from}'); // 'path' globParent('path/!(to|from)'); // 'path' globParent('path/?(to|from)'); // 'path' globParent('path/+(to|from)'); // 'path' globParent('path/*(to|from)'); // 'path' globParent('path/@(to|from)'); // 'path' globParent('path/**/*'); // 'path' // if provided a non-glob path, returns the nearest dir globParent('path/foo/bar.js'); // 'path/foo' globParent('path/foo/'); // 'path/foo' globParent('path/foo'); // 'path' (see issue #3 for details) API globParent(maybeGlobString, [options]) Takes a string and returns the part of the path before the glob begins. Be aware of Escaping rules and Limitations below. options { // Disables the automatic conversion of slashes for Windows flipBackslashes: true } Escaping The following characters have special significance in glob patterns and must be escaped if you want them to be treated as regular path characters: ? (question mark) unless used as a path segment alone * (asterisk) | (pipe) ( (opening parenthesis) ) (closing parenthesis) { (opening curly brace) } (closing curly brace) [ (opening bracket) ] (closing bracket) Example globParent('foo/[bar]/') // 'foo' globParent('foo/\\\\[bar]/') // 'foo/[bar]' Limitations Braces & Brackets This library attempts a quick and imperfect method of determining which path parts have glob magic without fully parsing/lexing the pattern. There are some advanced use cases that can trip it up, such as nested braces where the outer pair is escaped and the inner one contains a path separator. If you find yourself in the unlikely circumstance of being affected by this or need to ensure higher-fidelity glob handling in your library, it is recommended that you pre-process your input with expand-braces and/or expand-brackets. Windows Backslashes are not valid path separators for globs. If a path with backslashes is provided anyway, for simple cases, glob-parent will replace the path separator for you and return the non-glob parent path (now with forward-slashes, which are still valid as Windows path separators). This cannot be used in conjunction with escape characters. // BAD globParent('C:\\\\Program Files \\\\(x86\\\\)\\\\*.ext') // 'C:/Program Files /(x86/)' // GOOD globParent('C:/Program Files\\\\(x86\\\\)/*.ext') // 'C:/Program Files (x86)' If you are using escape characters for a pattern without path parts (i.e. relative to cwd), prefix with ./ to avoid confusing glob-parent. // BAD globParent('foo \\\\[bar]') // 'foo ' globParent('foo \\\\[bar]*') // 'foo ' // GOOD globParent('./foo \\\\[bar]') // 'foo [bar]' globParent('./foo \\\\[bar]*') // '.' License ISC"
  },
  "node_modules/has-flag/readme.html": {
    "href": "node_modules/has-flag/readme.html",
    "title": "has-flag",
    "keywords": "has-flag Check if argv has a specific flag Correctly stops looking after an -- argument terminator. Install $ npm install has-flag Usage // foo.js const hasFlag = require('has-flag'); hasFlag('unicorn'); //=> true hasFlag('--unicorn'); //=> true hasFlag('f'); //=> true hasFlag('-f'); //=> true hasFlag('foo=bar'); //=> true hasFlag('foo'); //=> false hasFlag('rainbow'); //=> false $ node foo.js -f --unicorn --foo=bar -- --rainbow API hasFlag(flag, [argv]) Returns a boolean for whether the flag exists. flag Type: string CLI flag to look for. The -- prefix is optional. argv Type: string[] Default: process.argv CLI arguments. License MIT ¬© Sindre Sorhus"
  },
  "node_modules/ignore-by-default/README.html": {
    "href": "node_modules/ignore-by-default/README.html",
    "title": "ignore-by-default",
    "keywords": "ignore-by-default This is a package aimed at Node.js development tools. It provides a list of directories that should probably be ignored by such tools, e.g. when watching for file changes. It's used by AVA and nodemon. Please contribute! Installation npm install --save ignore-by-default Usage The ignore-by-default module exports a directories() function, which will return an array of directory names. These are the ones you should ignore. // ['.git', '.sass_cache', ‚Ä¶] var ignoredDirectories = require('ignore-by-default').directories()"
  },
  "node_modules/inherits/README.html": {
    "href": "node_modules/inherits/README.html",
    "title": "",
    "keywords": "Browser-friendly inheritance fully compatible with standard node.js inherits. This package exports standard inherits from node.js util module in node environment, but also provides alternative browser-friendly implementation through browser field. Alternative implementation is a literal copy of standard one located in standalone module to avoid requiring of util. It also has a shim for old browsers with no Object.create support. While keeping you sure you are using standard inherits implementation in node.js environment, it allows bundlers such as browserify to not include full util package to your client code if all you need is just inherits function. It worth, because browser shim for util package is large and inherits is often the single function you need from it. It's recommended to use this package instead of require('util').inherits for any code that has chances to be used not only in node.js but in browser too. usage var inherits = require('inherits'); // then use exactly as the standard one note on version ~1.0 Version ~1.0 had completely different motivation and is not compatible neither with 2.0 nor with standard node.js inherits. If you are using version ~1.0 and planning to switch to ~2.0, be careful: new version uses super_ instead of super for referencing superclass new version overwrites current prototype while old one preserves any existing fields on it"
  },
  "node_modules/is-binary-path/readme.html": {
    "href": "node_modules/is-binary-path/readme.html",
    "title": "is-binary-path",
    "keywords": "is-binary-path Check if a file path is a binary file Install $ npm install is-binary-path Usage const isBinaryPath = require('is-binary-path'); isBinaryPath('source/unicorn.png'); //=> true isBinaryPath('source/unicorn.txt'); //=> false Related binary-extensions - List of binary file extensions is-text-path - Check if a filepath is a text file License MIT ¬© Sindre Sorhus, Paul Miller"
  },
  "node_modules/is-extglob/README.html": {
    "href": "node_modules/is-extglob/README.html",
    "title": "is-extglob",
    "keywords": "is-extglob Returns true if a string has an extglob. Install Install with npm: $ npm install --save is-extglob Usage var isExtglob = require('is-extglob'); True isExtglob('?(abc)'); isExtglob('@(abc)'); isExtglob('!(abc)'); isExtglob('*(abc)'); isExtglob('+(abc)'); False Escaped extglobs: isExtglob('\\\\?(abc)'); isExtglob('\\\\@(abc)'); isExtglob('\\\\!(abc)'); isExtglob('\\\\*(abc)'); isExtglob('\\\\+(abc)'); Everything else... isExtglob('foo.js'); isExtglob('!foo.js'); isExtglob('*.js'); isExtglob('**/abc.js'); isExtglob('abc/*.js'); isExtglob('abc/(aaa|bbb).js'); isExtglob('abc/[a-z].js'); isExtglob('abc/{a,b}.js'); isExtglob('abc/?.js'); isExtglob('abc.js'); isExtglob('abc/def/ghi.js'); History v2.0 Adds support for escaping. Escaped exglobs no longer return true. About Related projects has-glob: Returns true if an array has a glob pattern. | homepage is-glob: Returns true if the given string looks like a glob pattern or an extglob pattern‚Ä¶ more | homepage micromatch: Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | homepage Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Building docs (This document was generated by verb-generate-readme (a verb generator), please don't edit the readme directly. Any changes to the readme must be made in .verb.md.) To generate the readme and API documentation with verb: $ npm install -g verb verb-generate-readme && verb Running tests Install dev dependencies: $ npm install -d && npm test Author Jon Schlinkert github/jonschlinkert twitter/jonschlinkert License Copyright ¬© 2016, Jon Schlinkert. Released under the MIT license. This file was generated by verb-generate-readme, v0.1.31, on October 12, 2016."
  },
  "node_modules/is-glob/README.html": {
    "href": "node_modules/is-glob/README.html",
    "title": "is-glob",
    "keywords": "is-glob Returns true if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ‚ù§Ô∏è and support. Install Install with npm: $ npm install --save is-glob You might also be interested in is-valid-glob and has-glob. Usage var isGlob = require('is-glob'); Default behavior True Patterns that have glob characters or regex patterns will return true: isGlob('!foo.js'); isGlob('*.js'); isGlob('**/abc.js'); isGlob('abc/*.js'); isGlob('abc/(aaa|bbb).js'); isGlob('abc/[a-z].js'); isGlob('abc/{a,b}.js'); //=> true Extglobs isGlob('abc/@(a).js'); isGlob('abc/!(a).js'); isGlob('abc/+(a).js'); isGlob('abc/*(a).js'); isGlob('abc/?(a).js'); //=> true False Escaped globs or extglobs return false: isGlob('abc/\\\\@(a).js'); isGlob('abc/\\\\!(a).js'); isGlob('abc/\\\\+(a).js'); isGlob('abc/\\\\*(a).js'); isGlob('abc/\\\\?(a).js'); isGlob('\\\\!foo.js'); isGlob('\\\\*.js'); isGlob('\\\\*\\\\*/abc.js'); isGlob('abc/\\\\*.js'); isGlob('abc/\\\\(aaa|bbb).js'); isGlob('abc/\\\\[a-z].js'); isGlob('abc/\\\\{a,b}.js'); //=> false Patterns that do not have glob patterns return false: isGlob('abc.js'); isGlob('abc/def/ghi.js'); isGlob('foo.js'); isGlob('abc/@.js'); isGlob('abc/+.js'); isGlob('abc/?.js'); isGlob(); isGlob(null); //=> false Arrays are also false (If you want to check if an array has a glob pattern, use has-glob): isGlob(['**/*.js']); isGlob(['foo.js']); //=> false Option strict When options.strict === false the behavior is less strict in determining if a pattern is a glob. Meaning that some patterns that would return false may return true. This is done so that matching libraries like micromatch have a chance at determining if the pattern is a glob or not. True Patterns that have glob characters or regex patterns will return true: isGlob('!foo.js', {strict: false}); isGlob('*.js', {strict: false}); isGlob('**/abc.js', {strict: false}); isGlob('abc/*.js', {strict: false}); isGlob('abc/(aaa|bbb).js', {strict: false}); isGlob('abc/[a-z].js', {strict: false}); isGlob('abc/{a,b}.js', {strict: false}); //=> true Extglobs isGlob('abc/@(a).js', {strict: false}); isGlob('abc/!(a).js', {strict: false}); isGlob('abc/+(a).js', {strict: false}); isGlob('abc/*(a).js', {strict: false}); isGlob('abc/?(a).js', {strict: false}); //=> true False Escaped globs or extglobs return false: isGlob('\\\\!foo.js', {strict: false}); isGlob('\\\\*.js', {strict: false}); isGlob('\\\\*\\\\*/abc.js', {strict: false}); isGlob('abc/\\\\*.js', {strict: false}); isGlob('abc/\\\\(aaa|bbb).js', {strict: false}); isGlob('abc/\\\\[a-z].js', {strict: false}); isGlob('abc/\\\\{a,b}.js', {strict: false}); //=> false About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: assemble: Get the rocks out of your socks! Assemble makes you fast at creating web projects‚Ä¶ more | homepage base: Framework for rapidly creating high quality, server-side node.js applications, using plugins like building blocks | homepage update: Be scalable! Update is a new, open source developer framework and CLI for automating updates‚Ä¶ more | homepage verb: Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used‚Ä¶ more | homepage Contributors Commits Contributor 47 jonschlinkert 5 doowb 1 phated 1 danhper 1 paulmillr Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright ¬© 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on March 27, 2019."
  },
  "node_modules/is-number/README.html": {
    "href": "node_modules/is-number/README.html",
    "title": "is-number",
    "keywords": "is-number Returns true if the value is a finite number. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ‚ù§Ô∏è and support. Install Install with npm: $ npm install --save is-number Why is this needed? In JavaScript, it's not always as straightforward as it should be to reliably check if a value is a number. It's common for devs to use +, -, or Number() to cast a string value to a number (for example, when values are returned from user input, regex matches, parsers, etc). But there are many non-intuitive edge cases that yield unexpected results: console.log(+[]); //=> 0 console.log(+''); //=> 0 console.log(+' '); //=> 0 console.log(typeof NaN); //=> 'number' This library offers a performant way to smooth out edge cases like these. Usage const isNumber = require('is-number'); See the tests for more examples. true isNumber(5e3); // true isNumber(0xff); // true isNumber(-1.1); // true isNumber(0); // true isNumber(1); // true isNumber(1.1); // true isNumber(10); // true isNumber(10.10); // true isNumber(100); // true isNumber('-1.1'); // true isNumber('0'); // true isNumber('012'); // true isNumber('0xff'); // true isNumber('1'); // true isNumber('1.1'); // true isNumber('10'); // true isNumber('10.10'); // true isNumber('100'); // true isNumber('5e3'); // true isNumber(parseInt('012')); // true isNumber(parseFloat('012')); // true False Everything else is false, as you would expect: isNumber(Infinity); // false isNumber(NaN); // false isNumber(null); // false isNumber(undefined); // false isNumber(''); // false isNumber(' '); // false isNumber('foo'); // false isNumber([1]); // false isNumber([]); // false isNumber(function () {}); // false isNumber({}); // false Release history 7.0.0 Refactor. Now uses .isFinite if it exists. Performance is about the same as v6.0 when the value is a string or number. But it's now 3x-4x faster when the value is not a string or number. 6.0.0 Optimizations, thanks to @benaadams. 5.0.0 Breaking changes removed support for instanceof Number and instanceof String Benchmarks As with all benchmarks, take these with a grain of salt. See the benchmarks for more detail. # all v7.0 x 413,222 ops/sec ¬±2.02% (86 runs sampled) v6.0 x 111,061 ops/sec ¬±1.29% (85 runs sampled) parseFloat x 317,596 ops/sec ¬±1.36% (86 runs sampled) fastest is 'v7.0' # string v7.0 x 3,054,496 ops/sec ¬±1.05% (89 runs sampled) v6.0 x 2,957,781 ops/sec ¬±0.98% (88 runs sampled) parseFloat x 3,071,060 ops/sec ¬±1.13% (88 runs sampled) fastest is 'parseFloat,v7.0' # number v7.0 x 3,146,895 ops/sec ¬±0.89% (89 runs sampled) v6.0 x 3,214,038 ops/sec ¬±1.07% (89 runs sampled) parseFloat x 3,077,588 ops/sec ¬±1.07% (87 runs sampled) fastest is 'v6.0' About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: is-plain-object: Returns true if an object was created by the Object constructor. | homepage is-primitive: Returns true if the value is a primitive. | homepage isobject: Returns true if the value is an object and not an array or null. | homepage kind-of: Get the native type of a value. | homepage Contributors Commits Contributor 49 jonschlinkert 5 charlike-old 1 benaadams 1 realityking Author Jon Schlinkert LinkedIn Profile GitHub Profile Twitter Profile License Copyright ¬© 2018, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.6.0, on June 15, 2018."
  },
  "node_modules/minimatch/README.html": {
    "href": "node_modules/minimatch/README.html",
    "title": "minimatch",
    "keywords": "minimatch A minimal matching utility. This is the matching library used internally by npm. It works by converting glob expressions into JavaScript RegExp objects. Usage var minimatch = require(\"minimatch\") minimatch(\"bar.foo\", \"*.foo\") // true! minimatch(\"bar.foo\", \"*.bar\") // false! minimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy! Features Supports these glob features: Brace Expansion Extended glob matching \"Globstar\" ** matching See: man sh man bash man 3 fnmatch man 5 gitignore Minimatch Class Create a minimatch object by instantiating the minimatch.Minimatch class. var Minimatch = require(\"minimatch\").Minimatch var mm = new Minimatch(pattern, options) Properties pattern The original pattern the minimatch object represents. options The options supplied to the constructor. set A 2-dimensional array of regexp or string expressions. Each row in the array corresponds to a brace-expanded pattern. Each item in the row corresponds to a single path-part. For example, the pattern {a,b/c}/d would expand to a set of patterns like: [ [ a, d ] , [ b, c, d ] ] If a portion of the pattern doesn't have any \"magic\" in it (that is, it's something like \"foo\" rather than fo*o?), then it will be left as a string rather than converted to a regular expression. regexp Created by the makeRe method. A single regular expression expressing the entire pattern. This is useful in cases where you wish to use the pattern somewhat like fnmatch(3) with FNM_PATH enabled. negate True if the pattern is negated. comment True if the pattern is a comment. empty True if the pattern is \"\". Methods makeRe Generate the regexp member if necessary, and return it. Will return false if the pattern is invalid. match(fname) Return true if the filename matches the pattern, or false otherwise. matchOne(fileArray, patternArray, partial) Take a /-split filename, and match it against a single row in the regExpSet. This method is mainly for internal use, but is exposed so that it can be used by a glob-walker that needs to avoid excessive filesystem calls. All other methods are internal, and will be called as necessary. minimatch(path, pattern, options) Main export. Tests a path against the pattern using the options. var isJS = minimatch(file, \"*.js\", { matchBase: true }) minimatch.filter(pattern, options) Returns a function that tests its supplied argument, suitable for use with Array.filter. Example: var javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true})) minimatch.match(list, pattern, options) Match against the list of files, in the style of fnmatch or glob. If nothing is matched, and options.nonull is set, then return a list containing the pattern itself. var javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true})) minimatch.makeRe(pattern, options) Make a regular expression object from the pattern. Options All options are false by default. debug Dump a ton of stuff to stderr. nobrace Do not expand {a,b} and {1..3} brace sets. noglobstar Disable ** matching against multiple folder names. dot Allow patterns to match filenames starting with a period, even if the pattern does not explicitly have a period in that spot. Note that by default, a/**/b will not match a/.d/b, unless dot is set. noext Disable \"extglob\" style patterns like +(a|b). nocase Perform a case-insensitive match. nonull When a match is not found by minimatch.match, return a list containing the pattern itself if this option is set. When not set, an empty list is returned if there are no matches. matchBase If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. nocomment Suppress the behavior of treating # at the start of a pattern as a comment. nonegate Suppress the behavior of treating a leading ! character as negation. flipNegate Returns from negate expressions the same as if they were not negated. (Ie, true on a hit, false on a miss.) partial Compare a partial path to a pattern. As long as the parts of the path that are present are not contradicted by the pattern, it will be treated as a match. This is useful in applications where you're walking through a folder structure, and don't yet have the full path, but want to ensure that you do not walk down paths that can never be a match. For example, minimatch('/a/b', '/a/*/c/d', { partial: true }) // true, might be /a/b/c/d minimatch('/a/b', '/**/d', { partial: true }) // true, might be /a/b/.../d minimatch('/x/y/z', '/a/**/z', { partial: true }) // false, because x !== a allowWindowsEscape Windows path separator \\ is by default converted to /, which prohibits the usage of \\ as a escape character. This flag skips that behavior and allows using the escape character. Comparisons to other fnmatch/glob implementations While strict compliance with the existing standards is a worthwhile goal, some discrepancies exist between minimatch and other implementations, and are intentional. If the pattern starts with a ! character, then it is negated. Set the nonegate flag to suppress this behavior, and treat leading ! characters normally. This is perhaps relevant if you wish to start the pattern with a negative extglob pattern like !(a|B). Multiple ! characters at the start of a pattern will negate the pattern multiple times. If a pattern starts with #, then it is treated as a comment, and will not match anything. Use \\# to match a literal # at the start of a line, or set the nocomment flag to suppress this behavior. The double-star character ** is supported by default, unless the noglobstar flag is set. This is supported in the manner of bsdglob and bash 4.1, where ** only has special significance if it is the only thing in a path part. That is, a/**/b will match a/x/y/b, but a/**b will not. If an escaped pattern has no matches, and the nonull flag is set, then minimatch.match returns the pattern as-provided, rather than interpreting the character escapes. For example, minimatch.match([], \"\\\\*a\\\\?\") will return \"\\\\*a\\\\?\" rather than \"*a?\". This is akin to setting the nullglob option in bash, except that it does not resolve escaped pattern characters. If brace expansion is not disabled, then it is performed before any other interpretation of the glob pattern. Thus, a pattern like +(a|{b),c)}, which would not be valid in bash or zsh, is expanded first into the set of +(a|b) and +(a|c), and those patterns are checked for validity. Since those two are valid, matching proceeds."
  },
  "node_modules/ms/license.html": {
    "href": "node_modules/ms/license.html",
    "title": "",
    "keywords": "The MIT License (MIT) Copyright (c) 2020 Vercel, Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "node_modules/ms/readme.html": {
    "href": "node_modules/ms/readme.html",
    "title": "ms",
    "keywords": "ms Use this package to easily convert various time formats to milliseconds. Examples ms('2 days') // 172800000 ms('1d') // 86400000 ms('10h') // 36000000 ms('2.5 hrs') // 9000000 ms('2h') // 7200000 ms('1m') // 60000 ms('5s') // 5000 ms('1y') // 31557600000 ms('100') // 100 ms('-3 days') // -259200000 ms('-1h') // -3600000 ms('-200') // -200 Convert from Milliseconds ms(60000) // \"1m\" ms(2 * 60000) // \"2m\" ms(-3 * 60000) // \"-3m\" ms(ms('10 hours')) // \"10h\" Time Format Written-Out ms(60000, { long: true }) // \"1 minute\" ms(2 * 60000, { long: true }) // \"2 minutes\" ms(-3 * 60000, { long: true }) // \"-3 minutes\" ms(ms('10 hours'), { long: true }) // \"10 hours\" Features Works both in Node.js and in the browser If a number is supplied to ms, a string with a unit is returned If a string that contains the number is supplied, it returns it as a number (e.g.: it returns 100 for '100') If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned Related Packages ms.macro - Run ms as a macro at build-time. Caught a Bug? Fork this repository to your own GitHub account and then clone it to your local device Link the package to the global module directory: npm link Within the module you want to test your local development instance of ms, just link it to the dependencies: npm link ms. Instead of the default one from npm, Node.js will now use your clone of ms! As always, you can run the tests using: npm test"
  },
  "node_modules/nodemon/README.html": {
    "href": "node_modules/nodemon/README.html",
    "title": "nodemon",
    "keywords": "nodemon nodemon is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected. nodemon does not require any additional changes to your code or method of development. nodemon is a replacement wrapper for node. To use nodemon, replace the word node on the command line when executing your script. Installation Either through cloning with git or by using npm (the recommended way): npm install -g nodemon # or using yarn: yarn global add nodemon And nodemon will be installed globally to your system path. You can also install nodemon as a development dependency: npm install --save-dev nodemon # or using yarn: yarn add nodemon -D With a local installation, nodemon will not be available in your system path or you can't use it directly from the command line. Instead, the local installation of nodemon can be run by calling it from within an npm script (such as npm start) or using npx nodemon. Usage nodemon wraps your application, so you can pass all the arguments you would normally pass to your app: nodemon [your node app] For CLI options, use the -h (or --help) argument: nodemon -h Using nodemon is simple, if my application accepted a host and port as the arguments, I would start it as so: nodemon ./server.js localhost 8080 Any output from this script is prefixed with [nodemon], otherwise all output from your application, errors included, will be echoed out as expected. You can also pass the inspect flag to node through the command line as you would normally: nodemon --inspect ./server.js 80 If you have a package.json file for your app, you can omit the main script entirely and nodemon will read the package.json for the main property and use that value as the app (ref). nodemon will also search for the scripts.start property in package.json (as of nodemon 1.1.x). Also check out the FAQ or issues for nodemon. Automatic re-running nodemon was originally written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes. Manual restarting Whilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can type rs with a carriage return, and nodemon will restart your process. Config files nodemon supports local and global configuration files. These are usually named nodemon.json and can be located in the current working directory or in your home directory. An alternative local configuration file can be specified with the --config <file> option. The specificity is as follows, so that a command line argument will always override the config file settings: command line arguments local config global config A config file can take any of the command line arguments as JSON key values, for example: { \"verbose\": true, \"ignore\": [\"*.test.js\", \"**/fixtures/**\"], \"execMap\": { \"rb\": \"ruby\", \"pde\": \"processing --sketch={{pwd}} --run\" } } The above nodemon.json file might be my global config so that I have support for ruby files and processing files, and I can run nodemon demo.pde and nodemon will automatically know how to run the script even though out of the box support for processing scripts. A further example of options can be seen in sample-nodemon.md package.json If you want to keep all your package configurations in one place, nodemon supports using package.json for configuration. Specify the config in the same format as you would for a config file but under nodemonConfig in the package.json file, for example, take the following package.json: { \"name\": \"nodemon\", \"homepage\": \"http://nodemon.io\", \"...\": \"... other standard package.json values\", \"nodemonConfig\": { \"ignore\": [\"**/test/**\", \"**/docs/**\"], \"delay\": 2500 } } Note that if you specify a --config file or provide a local nodemon.json any package.json config is ignored. This section needs better documentation, but for now you can also see nodemon --help config (also here). Using nodemon as a module Please see doc/requireable.md Using nodemon as child process Please see doc/events.md Running non-node scripts nodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no nodemon.json: nodemon --exec \"python -v\" ./app.py Now nodemon will run app.py with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the .py extension. Default executables Using the nodemon.json config file, you can define your own default executables using the execMap property. This is particularly useful if you're working with a language that isn't supported by default by nodemon. To add support for nodemon to know about the .pl extension (for Perl), the nodemon.json file would add: { \"execMap\": { \"pl\": \"perl\" } } Now running the following, nodemon will know to use perl as the executable: nodemon script.pl It's generally recommended to use the global nodemon.json to add your own execMap options. However, if there's a common default that's missing, this can be merged in to the project so that nodemon supports it by default, by changing default.js and sending a pull request. Monitoring multiple directories By default nodemon monitors the current working directory. If you want to take control of that option, use the --watch option to add specific paths: nodemon --watch app --watch libs app/server.js Now nodemon will only restart if there are changes in the ./app or ./libs directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories. Nodemon also supports unix globbing, e.g --watch './lib/*'. The globbing pattern must be quoted. Specifying extension watch list By default, nodemon looks for files with the .js, .mjs, .coffee, .litcoffee, and .json extensions. If you use the --exec option and monitor app.py nodemon will monitor files with the extension of .py. However, you can specify your own list with the -e (or --ext) switch like so: nodemon -e js,pug Now nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .pug. Ignoring files By default, nodemon will only restart when a .js JavaScript file changes. In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application. This can be done via the command line: nodemon --ignore lib/ --ignore tests/ Or specific files can be ignored: nodemon --ignore lib/app.js Patterns can also be ignored (but be sure to quote the arguments): nodemon --ignore 'lib/*.js' Important the ignore rules are patterns matched to the full absolute path, and this determines how many files are monitored. If using a wild card glob pattern, it needs to be used as ** or omitted entirely. For example, nodemon --ignore '**/test/**' will work, whereas --ignore '*/test/*' will not. Note that by default, nodemon will ignore the .git, node_modules, bower_components, .nyc_output, coverage and .sass-cache directories and add your ignored patterns to the list. If you want to indeed watch a directory like node_modules, you need to override the underlying default ignore rules. Application isn't restarting In some networked environments (such as a container running nodemon reading across a mounted drive), you will need to use the legacyWatch: true which enables Chokidar's polling. Via the CLI, use either --legacy-watch or -L for short: nodemon -L Though this should be a last resort as it will poll every file it can find. Delaying restarting In some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple times unnecessarily. To add an extra throttle, or delay restarting, use the --delay command: nodemon --delay 10 server.js For more precision, milliseconds can be specified. Either as a float: nodemon --delay 2.5 server.js Or using the time specifier (ms): nodemon --delay 2500ms server.js The delay figure is number of seconds (or milliseconds, if specified) to delay before restarting. So nodemon will only restart your app the given number of seconds after the last file change. If you are setting this value in nodemon.json, the value will always be interpreted in milliseconds. E.g., the following are equivalent: nodemon --delay 2.5 { \"delay\": 2500 } Gracefully reloading down your script It is possible to have nodemon send any signal that you specify to your application. nodemon --signal SIGHUP server.js Your application can handle the signal as follows. process.once(\"SIGHUP\", function () { reloadSomeConfiguration(); }) Please note that nodemon will send this signal to every process in the process tree. If you are using cluster, then each workers (as well as the master) will receive the signal. If you wish to terminate all workers on receiving a SIGHUP, a common pattern is to catch the SIGHUP in the master, and forward SIGTERM to all workers, while ensuring that all workers ignore SIGHUP. if (cluster.isMaster) { process.on(\"SIGHUP\", function () { for (const worker of Object.values(cluster.workers)) { worker.process.kill(\"SIGTERM\"); } }); } else { process.on(\"SIGHUP\", function() {}) } Controlling shutdown of your script nodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself. The following example will listen once for the SIGUSR2 signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control: process.once('SIGUSR2', function () { gracefulShutdown(function () { process.kill(process.pid, 'SIGUSR2'); }); }); Note that the process.kill is only called once your shutdown jobs are complete. Hat tip to Benjie Gillam for writing this technique up. Triggering events when nodemon state changes If you want growl like notifications when nodemon restarts or to trigger an action when an event happens, then you can either require nodemon or add event actions to your nodemon.json file. For example, to trigger a notification on a Mac when nodemon restarts, nodemon.json looks like this: { \"events\": { \"restart\": \"osascript -e 'display notification \\\"app restarted\\\" with title \\\"nodemon\\\"'\" } } A full list of available events is listed on the event states wiki. Note that you can bind to both states and messages. Pipe output to somewhere else nodemon({ script: ..., stdout: false // important: this tells nodemon not to output to console }).on('readable', function() { // the `readable` event indicates that data is ready to pick up this.stdout.pipe(fs.createWriteStream('output.txt')); this.stderr.pipe(fs.createWriteStream('err.txt')); }); Using nodemon in your gulp workflow Check out the gulp-nodemon plugin to integrate nodemon with the rest of your project's gulp workflow. Using nodemon in your Grunt workflow Check out the grunt-nodemon plugin to integrate nodemon with the rest of your project's grunt workflow. Pronunciation nodemon, is it pronounced: node-mon, no-demon or node-e-mon (like pok√©mon)? Well...I've been asked this many times before. I like that I've been asked this before. There's been bets as to which one it actually is. The answer is simple, but possibly frustrating. I'm not saying (how I pronounce it). It's up to you to call it as you like. All answers are correct :) Design principles Fewer flags is better Works across all platforms Fewer features Let individuals build on top of nodemon Offer all CLI functionality as an API Contributions must have and pass tests Nodemon is not perfect, and CLI arguments has sprawled beyond where I'm completely happy, but perhaps it can be reduced a little one day. FAQ See the FAQ and please add your own questions if you think they would help others. Backers Thank you to all our backers! üôè Sponsors Support this project by becoming a sponsor. Your logo will show up here with a link to your website. Sponsor this project today ‚ù§Ô∏è License MIT http://rem.mit-license.org"
  },
  "node_modules/normalize-path/README.html": {
    "href": "node_modules/normalize-path/README.html",
    "title": "normalize-path",
    "keywords": "normalize-path Normalize slashes in a file path to be posix/unix-like forward slashes. Also condenses repeat slashes to a single slash and removes and trailing slashes, unless disabled. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ‚ù§Ô∏è and support. Install Install with npm: $ npm install --save normalize-path Usage const normalize = require('normalize-path'); console.log(normalize('\\\\foo\\\\bar\\\\baz\\\\')); //=> '/foo/bar/baz' win32 namespaces console.log(normalize('\\\\\\\\?\\\\UNC\\\\Server01\\\\user\\\\docs\\\\Letter.txt')); //=> '//?/UNC/Server01/user/docs/Letter.txt' console.log(normalize('\\\\\\\\.\\\\CdRomX')); //=> '//./CdRomX' Consecutive slashes Condenses multiple consecutive forward slashes (except for leading slashes in win32 namespaces) to a single slash. console.log(normalize('.//foo//bar///////baz/')); //=> './foo/bar/baz' Trailing slashes By default trailing slashes are removed. Pass false as the last argument to disable this behavior and keep trailing slashes: console.log(normalize('foo\\\\bar\\\\baz\\\\', false)); //=> 'foo/bar/baz/' console.log(normalize('./foo/bar/baz/', false)); //=> './foo/bar/baz/' Release history v3.0 No breaking changes in this release. a check was added to ensure that win32 namespaces are handled properly by win32 path.parse() after a path has been normalized by this library. a minor optimization was made to simplify how the trailing separator was handled About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects Other useful path-related libraries: contains-path: Return true if a file path contains the given path. | homepage is-absolute: Returns true if a file path is absolute. Does not rely on the path module‚Ä¶ more | homepage is-relative: Returns true if the path appears to be relative. | homepage parse-filepath: Pollyfill for node.js path.parse, parses a filepath into an object. | homepage path-ends-with: Return true if a file path ends with the given string/suffix. | homepage unixify: Convert Windows file paths to unix paths. | homepage Contributors Commits Contributor 35 jonschlinkert 1 phated Author Jon Schlinkert LinkedIn Profile GitHub Profile Twitter Profile License Copyright ¬© 2018, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.6.0, on April 19, 2018."
  },
  "node_modules/npm-watch/README.html": {
    "href": "node_modules/npm-watch/README.html",
    "title": "npm-watch",
    "keywords": "npm-watch Run scripts from package.json when files change. Common Issues monorepo setups: In a monorepo setup, npm-watch may fail with ENOENT. The solution is to have nodemon globally installed. See here for more context Synopsis Install it: npm install npm-watch Add a top-level \"watch\" config to your package.json and a \"watch\" script to your \"scripts\": { \"watch\": { \"test\": \"{src,test}/*.js\" }, \"scripts\": { \"test\": \"tape test/*.js\", \"watch\": \"npm-watch\" } } There is the possibility to watch for different tasks { \"watch\": { \"run_android\": { \"patterns\": [ \"app\" ], \"extensions\": \"ts,html,scss\", \"quiet\": false }, \"run_ios\": { \"patterns\": [ \"app\" ], \"extensions\": \"ts,html,scss\", \"quiet\": false } }, \"scripts\": { \"watch_android\": \"npm-watch run_android\", \"watch_ios\": \"npm-watch run_ios\", \"run_android\": \"tns run android --emulator\", \"run_ios\": \"tns run ios --emulator\" } } The top level keys of the \"watch\" config should match the names of your \"scripts\", and the values should be a glob pattern or array of glob patterns to watch. Also it is now possible to obtain a second parameter to define the script which should be run for watching and not watch all possible scripts at once. If you need to watch files with extensions other than those that nodemon watches by default (.js, .coffee, .litcoffee), you can set the value to an object with patterns and extensions keys. You can also add an ignore key (a list or a string) to ignore specific files. Finally, you can add a quiet flag to hide the script name in any output on stdout or stderr, or you can use the inherit flag to preserve the original's process stdout or stderr. You can enable nodemon legacy watch and specify the restart delay in milliseconds with the corresponding flags. The quiet flag was changed from a string to a boolean in 0.1.5. Backwards compatibility will be kept for two patch versions. Use runOnChangeOnly to set the nodemon option --on-change-only. Setting this to true tells nodemon to execute script on change only, not startup. { \"watch\": { \"test\": { \"patterns\": [\"src\", \"test\"], \"extensions\": \"js,jsx\", \"ignore\": \"src/vendor/external.min.js\", \"quiet\": true, \"legacyWatch\": true, \"delay\": 2500, \"runOnChangeOnly\": false } }, \"scripts\": { \"test\": \"tape test/*.js\" } } Start the watcher with npm run watch in a terminal, then edit some files: mkdir src test npm run watch & cat <<EOF > test/test-sum.js var test = require('tape') test('sum module', function (t) { var sum = require('../src/sum.js') t.ok(sum(1, 2), 3, \"Sums appear correct\") t.end() }) EOF (Feel free to use the editor of your choice, cat just makes for easy demos) You should see that your tests ran automatically, and failed because src/sum.js is missing. Let's fix that: cat <<EOF > src/sum.js module.exports = function (a, b) { return 1 } EOF Our tests will run again, and this time they almost work. Let's fix sum.js: cat <<EOF > src/sum.js module.exports = function (a, b) { return a + b } EOF Tests run perfectly, ship it to the enterprise! Once you have the watcher running, you can force restart all tasks by entering rs. If you want to only force a single task, type the name of the key from the watch config (for example rs test). Global Config setMaxListeners If too many listeners are added to an event emitter, node.js will send a warning (rightfully so) about potential memory leaks. The default maximum is 10. If you need more than that, you can add a top level global config to your package.json \"watchGlobalConfig\": { \"setMaxListeners\": true } And max listeners will be set on the relevant processes to the minimum needed to avoid the warning. Options patterns Array of paths to watch \"patterns\": [\"src\", \"test\"] extensions Comma delimited list of file extensions to watch \"extensions\": \"js,jsx\" ignore Add an ignore property to your watch object. The value of ignore can be a string if you only want to ignore a single glob: \"watch\": { \"build\": { \"ignore\": \"build\", ... } ... } Or an array if you want to ignore multiple globs: \"watch\": { \"build\": { \"ignore\": [ \"build\", \"node_modules\" ], ... } ... } quiet Boolean to hide the script name in any output on stdout and stderr \"quiet\": false inherit Boolean to preserve the original process' stdout and stderr \"inherit\": false legacyWatch Boolean to enable legacy watch \"legacyWatch\": true delay Number of milliseconds to delay before checking for new files \"delay\": 2500 clearBuffer Boolean to clear the buffer after detecting a new change \"clearBuffer\": true verbose Boolean to turn on the nodemons verbose mode \"verbose\": true silent Boolean to turn on nodemons silent (quiet) mode Silent was used as we already had an existing flag called quiet. This may change in a future release \"silent\": true Acknowledgements This module does very little but run nodemon for you, all credit for the reliable file watching and process restarting should go to there. License MIT"
  },
  "node_modules/picomatch/CHANGELOG.html": {
    "href": "node_modules/picomatch/CHANGELOG.html",
    "title": "Release history",
    "keywords": "Release history All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. Guiding Principles Changelogs are for humans, not machines. There should be an entry for every single version. The same types of changes should be grouped. Versions and sections should be linkable. The latest version comes first. The release date of each versions is displayed. Mention whether you follow Semantic Versioning. Types of changes Changelog entries are classified using the following labels (from keep-a-changelog): Added for new features. Changed for changes in existing functionality. Deprecated for soon-to-be removed features. Removed for now removed features. Fixed for any bug fixes. Security in case of vulnerabilities. 2.3.1 (2022-01-02) Fixed Fixes bug when a pattern containing an expression after the closing parenthesis (/!(*.d).{ts,tsx}) was incorrectly converted to regexp (9f241ef). Changed Some documentation improvements (f81d236, 421e0e7). 2.3.0 (2021-05-21) Fixed Fixes bug where file names with two dots were not being matched consistently with negation extglobs containing a star (56083ef) 2.2.3 (2021-04-10) Fixed Do not skip pattern seperator for square brackets (fb08a30). Set negatedExtGlob also if it does not span the whole pattern (032e3f5). 2.2.2 (2020-03-21) Fixed Correctly handle parts of the pattern after parentheses in the scan method (e15b920). 2.2.1 (2020-01-04) Fixes #49, so that braces with no sets or ranges are now propertly treated as literals. 2.2.0 (2020-01-04) Disable fastpaths mode for the parse method (5b8d33f) Add tokens, slashes, and parts to the object returned by picomatch.scan(). 2.1.0 (2019-10-31) add benchmarks for scan (4793b92) Add eslint object-curly-spacing rule (707c650) Add prefer-const eslint rule (5c7501c) Add support for nonegate in scan API (275c9b9) Change lets to consts. Move root import up. (4840625) closes https://github.com/micromatch/picomatch/issues/21 (766bcb0) Fix \"Extglobs\" table in readme (eb19da8) fixes https://github.com/micromatch/picomatch/issues/20 (9caca07) fixes https://github.com/micromatch/picomatch/issues/26 (fa58f45) Lint test (d433a34) lint unit tests (0159b55) Make scan work with noext (6c02e03) minor linting (c2a2b87) minor parser improvements (197671d) remove eslint since it... (07876fa) remove funding file (8ebe96d) Remove unused funks (cbc6d54) Run eslint during pretest, fix existing eslint findings (0682367) support noparen in scan (3d37569) update changelog (7b34e77) update travis (777f038) Use eslint-disable-next-line instead of eslint-disable (4e7c1fd) 2.0.7 (2019-05-14) 2.0.7 (9eb9a71) supports lookbehinds (1f63f7e) update .verb.md file with typo change (2741279) fix: typo in README (0753e44) 2.0.4 (2019-04-10) Fixed Readme link fixed by @danez. options.capture now works as expected when fastpaths are enabled. See https://github.com/micromatch/picomatch/pull/12/commits/26aefd71f1cfaf95c37f1c1fcab68a693b037304. Thanks to @DrPizza. 2.0.0 (2019-04-10) Added Adds support for options.onIgnore. See the readme for details Adds support for options.onResult. See the readme for details Breaking changes The unixify option was renamed to windows caching and all related options and methods have been removed 1.0.0 (2018-11-05) adds .onMatch option improvements to .scan method numerous improvements and optimizations for matching and parsing better windows path handling 0.1.0 - 2017-04-13 First release."
  },
  "node_modules/picomatch/README.html": {
    "href": "node_modules/picomatch/README.html",
    "title": "Picomatch",
    "keywords": "Picomatch Blazing fast and accurate glob matcher written in JavaScript. No dependencies and full support for standard and extended Bash glob features, including braces, extglobs, POSIX brackets, and regular expressions. Why picomatch? Lightweight - No dependencies Minimal - Tiny API surface. Main export is a function that takes a glob pattern and returns a matcher function. Fast - Loads in about 2ms (that's several times faster than a single frame of a HD movie at 60fps) Performant - Use the returned matcher function to speed up repeat matching (like when watching files) Accurate matching - Using wildcards (* and ?), globstars (**) for nested directories, advanced globbing with extglobs, braces, and POSIX brackets, and support for escaping special characters with \\ or quotes. Well tested - Thousands of unit tests See the library comparison to other libraries. Table of Contents Click to expand Install Usage API picomatch .test .matchBase .isMatch .parse .scan .compileRe .makeRe .toRegex Options Picomatch options Scan Options Options Examples Globbing features Basic globbing Advanced globbing Braces Matching special characters as literals Library Comparisons Benchmarks Philosophies About Author License (TOC generated by verb using markdown-toc) Install Install with npm: npm install --save picomatch Usage The main export is a function that takes a glob pattern and an options object and returns a function for matching strings. const pm = require('picomatch'); const isMatch = pm('*.js'); console.log(isMatch('abcd')); //=> false console.log(isMatch('a.js')); //=> true console.log(isMatch('a.md')); //=> false console.log(isMatch('a/b.js')); //=> false API picomatch Creates a matcher function from one or more glob patterns. The returned function takes a string to match as its first argument, and returns true if the string is a match. The returned matcher function also takes a boolean as the second argument that, when true, returns an object with additional information. Params globs {String|Array}: One or more glob patterns. options {Object=} returns {Function=}: Returns a matcher function. Example const picomatch = require('picomatch'); // picomatch(glob[, options]); const isMatch = picomatch('*.!(*a)'); console.log(isMatch('a.a')); //=> false console.log(isMatch('a.b')); //=> true .test Test input with the given regex. This is used by the main picomatch() function to test the input string. Params input {String}: String to test. regex {RegExp} returns {Object}: Returns an object with matching info. Example const picomatch = require('picomatch'); // picomatch.test(input, regex[, options]); console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/)); // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' } .matchBase Match the basename of a filepath. Params input {String}: String to test. glob {RegExp|String}: Glob pattern or regex created by .makeRe. returns {Boolean} Example const picomatch = require('picomatch'); // picomatch.matchBase(input, glob[, options]); console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true .isMatch Returns true if any of the given glob patterns match the specified string. Params {String|Array}: str The string to test. {String|Array}: patterns One or more glob patterns to use for matching. {Object}: See available options. returns {Boolean}: Returns true if any patterns match str Example const picomatch = require('picomatch'); // picomatch.isMatch(string, patterns[, options]); console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true console.log(picomatch.isMatch('a.a', 'b.*')); //=> false .parse Parse a glob pattern to create the source string for a regular expression. Params pattern {String} options {Object} returns {Object}: Returns an object with useful properties and output to be used as a regex source string. Example const picomatch = require('picomatch'); const result = picomatch.parse(pattern[, options]); .scan Scan a glob pattern to separate the pattern into segments. Params input {String}: Glob pattern to scan. options {Object} returns {Object}: Returns an object with Example const picomatch = require('picomatch'); // picomatch.scan(input[, options]); const result = picomatch.scan('!./foo/*.js'); console.log(result); { prefix: '!./', input: '!./foo/*.js', start: 3, base: 'foo', glob: '*.js', isBrace: false, isBracket: false, isGlob: true, isExtglob: false, isGlobstar: false, negated: true } .compileRe Compile a regular expression from the state object returned by the parse() method. Params state {Object} options {Object} returnOutput {Boolean}: Intended for implementors, this argument allows you to return the raw output from the parser. returnState {Boolean}: Adds the state to a state property on the returned regex. Useful for implementors and debugging. returns {RegExp} .makeRe Create a regular expression from a parsed glob pattern. Params state {String}: The object returned from the .parse method. options {Object} returnOutput {Boolean}: Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result. returnState {Boolean}: Implementors may use this argument to return the state from the parsed glob with the returned regular expression. returns {RegExp}: Returns a regex created from the given pattern. Example const picomatch = require('picomatch'); const state = picomatch.parse('*.js'); // picomatch.compileRe(state[, options]); console.log(picomatch.compileRe(state)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ .toRegex Create a regular expression from the given regex source string. Params source {String}: Regular expression source string. options {Object} returns {RegExp} Example const picomatch = require('picomatch'); // picomatch.toRegex(source[, options]); const { output } = picomatch.parse('*.js'); console.log(picomatch.toRegex(output)); //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/ Options Picomatch options The following options may be used with the main picomatch() function or any of the methods on the picomatch API. Option Type Default value Description basename boolean false If set, then patterns without slashes will be matched against the basename of the path if it contains slashes. For example, a?b would match the path /xyz/123/acb, but not /xyz/acb/123. bash boolean false Follow bash matching rules more strictly - disallows backslashes as escape characters, and treats single stars as globstars (**). capture boolean undefined Return regex matches in supporting methods. contains boolean undefined Allows glob to match any part of the given string(s). cwd string process.cwd() Current working directory. Used by picomatch.split() debug boolean undefined Debug regular expressions when an error is thrown. dot boolean false Enable dotfile matching. By default, dotfiles are ignored unless a . is explicitly defined in the pattern, or options.dot is true expandRange function undefined Custom function for expanding ranges in brace patterns, such as {a..z}. The function receives the range values as two arguments, and it must return a string to be used in the generated regex. It's recommended that returned strings be wrapped in parentheses. failglob boolean false Throws an error if no matches are found. Based on the bash option of the same name. fastpaths boolean true To speed up processing, full parsing is skipped for a handful common glob patterns. Disable this behavior by setting this option to false. flags string undefined Regex flags to use in the generated regex. If defined, the nocase option will be overridden. format function undefined Custom function for formatting the returned string. This is useful for removing leading slashes, converting Windows paths to Posix paths, etc. ignore array\\|string undefined One or more glob patterns for excluding strings that should not be matched from the result. keepQuotes boolean false Retain quotes in the generated regex, since quotes may also be used as an alternative to backslashes. literalBrackets boolean undefined When true, brackets in the glob pattern will be escaped so that only literal brackets will be matched. matchBase boolean false Alias for basename maxLength boolean 65536 Limit the max length of the input string. An error is thrown if the input string is longer than this value. nobrace boolean false Disable brace matching, so that {a,b} and {1..3} would be treated as literal characters. nobracket boolean undefined Disable matching with regex brackets. nocase boolean false Make matching case-insensitive. Equivalent to the regex i flag. Note that this option is overridden by the flags option. nodupes boolean true Deprecated, use nounique instead. This option will be removed in a future major release. By default duplicates are removed. Disable uniquification by setting this option to false. noext boolean false Alias for noextglob noextglob boolean false Disable support for matching with extglobs (like +(a\\|b)) noglobstar boolean false Disable support for matching nested directories with globstars (**) nonegate boolean false Disable support for negating with leading ! noquantifiers boolean false Disable support for regex quantifiers (like a{1,2}) and treat them as brace patterns to be expanded. onIgnore function undefined Function to be called on ignored items. onMatch function undefined Function to be called on matched items. onResult function undefined Function to be called on all items, regardless of whether or not they are matched or ignored. posix boolean false Support POSIX character classes (\"posix brackets\"). posixSlashes boolean undefined Convert all slashes in file paths to forward slashes. This does not convert slashes in the glob pattern itself prepend boolean undefined String to prepend to the generated regex used for matching. regex boolean false Use regular expression rules for + (instead of matching literal +), and for stars that follow closing parentheses or brackets (as in )* and ]*). strictBrackets boolean undefined Throw an error if brackets, braces, or parens are imbalanced. strictSlashes boolean undefined When true, picomatch won't match trailing slashes with single stars. unescape boolean undefined Remove backslashes preceding escaped characters in the glob pattern. By default, backslashes are retained. unixify boolean undefined Alias for posixSlashes, for backwards compatibility. picomatch has automatic detection for regex positive and negative lookbehinds. If the pattern contains a negative lookbehind, you must be using Node.js >= 8.10 or else picomatch will throw an error. Scan Options In addition to the main picomatch options, the following options may also be used with the .scan method. Option Type Default value Description tokens boolean false When true, the returned object will include an array of tokens (objects), representing each path \"segment\" in the scanned glob pattern parts boolean false When true, the returned object will include an array of strings representing each path \"segment\" in the scanned glob pattern. This is automatically enabled when options.tokens is true Example const picomatch = require('picomatch'); const result = picomatch.scan('!./foo/*.js', { tokens: true }); console.log(result); // { // prefix: '!./', // input: '!./foo/*.js', // start: 3, // base: 'foo', // glob: '*.js', // isBrace: false, // isBracket: false, // isGlob: true, // isExtglob: false, // isGlobstar: false, // negated: true, // maxDepth: 2, // tokens: [ // { value: '!./', depth: 0, isGlob: false, negated: true, isPrefix: true }, // { value: 'foo', depth: 1, isGlob: false }, // { value: '*.js', depth: 1, isGlob: true } // ], // slashes: [ 2, 6 ], // parts: [ 'foo', '*.js' ] // } Options Examples options.expandRange Type: function Default: undefined Custom function for expanding ranges in brace patterns. The fill-range library is ideal for this purpose, or you can use custom code to do whatever you need. Example The following example shows how to create a glob that matches a folder const fill = require('fill-range'); const regex = pm.makeRe('foo/{01..25}/bar', { expandRange(a, b) { return `(${fill(a, b, { toRegex: true })})`; } }); console.log(regex); //=> /^(?:foo\\/((?:0[1-9]|1[0-9]|2[0-5]))\\/bar)$/ console.log(regex.test('foo/00/bar')) // false console.log(regex.test('foo/01/bar')) // true console.log(regex.test('foo/10/bar')) // true console.log(regex.test('foo/22/bar')) // true console.log(regex.test('foo/25/bar')) // true console.log(regex.test('foo/26/bar')) // false options.format Type: function Default: undefined Custom function for formatting strings before they're matched. Example // strip leading './' from strings const format = str => str.replace(/^\\.\\//, ''); const isMatch = picomatch('foo/*.js', { format }); console.log(isMatch('./foo/bar.js')); //=> true options.onMatch const onMatch = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onMatch }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onIgnore const onIgnore = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onIgnore, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); options.onResult const onResult = ({ glob, regex, input, output }) => { console.log({ glob, regex, input, output }); }; const isMatch = picomatch('*', { onResult, ignore: 'f*' }); isMatch('foo'); isMatch('bar'); isMatch('baz'); Globbing features Basic globbing (Wildcard matching) Advanced globbing (extglobs, posix brackets, brace matching) Basic globbing Character Description * Matches any character zero or more times, excluding path separators. Does not match path separators or hidden files or directories (\"dotfiles\"), unless explicitly enabled by setting the dot option to true. ** Matches any character zero or more times, including path separators. Note that ** will only match path separators (/, and \\\\ on Windows) when they are the only characters in a path segment. Thus, foo**/bar is equivalent to foo*/bar, and foo/a**b/bar is equivalent to foo/a*b/bar, and more than two consecutive stars in a glob path segment are regarded as a single star. Thus, foo/***/bar is equivalent to foo/*/bar. ? Matches any character excluding path separators one time. Does not match path separators or leading dots. [abc] Matches any characters inside the brackets. For example, [abc] would match the characters a, b or c, and nothing else. Matching behavior vs. Bash Picomatch's matching features and expected results in unit tests are based on Bash's unit tests and the Bash 4.3 specification, with the following exceptions: Bash will match foo/bar/baz with *. Picomatch only matches nested directories with **. Bash greedily matches with negated extglobs. For example, Bash 4.3 says that !(foo)* should match foo and foobar, since the trailing * bracktracks to match the preceding pattern. This is very memory-inefficient, and IMHO, also incorrect. Picomatch would return false for both foo and foobar. Advanced globbing extglobs POSIX brackets Braces Extglobs Pattern Description @(pattern) Match only one consecutive occurrence of pattern *(pattern) Match zero or more consecutive occurrences of pattern +(pattern) Match one or more consecutive occurrences of pattern ?(pattern) Match zero or one consecutive occurrences of pattern !(pattern) Match anything but pattern Examples const pm = require('picomatch'); // *(pattern) matches ZERO or more of \"pattern\" console.log(pm.isMatch('a', 'a*(z)')); // true console.log(pm.isMatch('az', 'a*(z)')); // true console.log(pm.isMatch('azzz', 'a*(z)')); // true // +(pattern) matches ONE or more of \"pattern\" console.log(pm.isMatch('a', 'a*(z)')); // true console.log(pm.isMatch('az', 'a*(z)')); // true console.log(pm.isMatch('azzz', 'a*(z)')); // true // supports multiple extglobs console.log(pm.isMatch('foo.bar', '!(foo).!(bar)')); // false // supports nested extglobs console.log(pm.isMatch('foo.bar', '!(!(foo)).!(!(bar))')); // true POSIX brackets POSIX classes are disabled by default. Enable this feature by setting the posix option to true. Enable POSIX bracket support console.log(pm.makeRe('[[:word:]]+', { posix: true })); //=> /^(?:(?=.)[A-Za-z0-9_]+\\/?)$/ Supported POSIX classes The following named POSIX bracket expressions are supported: [:alnum:] - Alphanumeric characters, equ [a-zA-Z0-9] [:alpha:] - Alphabetical characters, equivalent to [a-zA-Z]. [:ascii:] - ASCII characters, equivalent to [\\\\x00-\\\\x7F]. [:blank:] - Space and tab characters, equivalent to [ \\\\t]. [:cntrl:] - Control characters, equivalent to [\\\\x00-\\\\x1F\\\\x7F]. [:digit:] - Numerical digits, equivalent to [0-9]. [:graph:] - Graph characters, equivalent to [\\\\x21-\\\\x7E]. [:lower:] - Lowercase letters, equivalent to [a-z]. [:print:] - Print characters, equivalent to [\\\\x20-\\\\x7E ]. [:punct:] - Punctuation and symbols, equivalent to [\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_{|}~]`. [:space:] - Extended space characters, equivalent to [ \\\\t\\\\r\\\\n\\\\v\\\\f]. [:upper:] - Uppercase letters, equivalent to [A-Z]. [:word:] - Word characters (letters, numbers and underscores), equivalent to [A-Za-z0-9_]. [:xdigit:] - Hexadecimal digits, equivalent to [A-Fa-f0-9]. See the Bash Reference Manual for more information. Braces Picomatch does not do brace expansion. For brace expansion and advanced matching with braces, use micromatch instead. Picomatch has very basic support for braces. Matching special characters as literals If you wish to match the following special characters in a filepath, and you want to use these characters in your glob pattern, they must be escaped with backslashes or quotes: Special Characters Some characters that are used for matching in regular expressions are also regarded as valid file path characters on some platforms. To match any of the following characters as literals: `$^*+?()[] Examples: console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); console.log(pm.makeRe('foo/bar \\\\(1\\\\)')); Library Comparisons The following table shows which features are supported by minimatch, micromatch, picomatch, nanomatch, extglob, braces, and expand-brackets. Feature minimatch micromatch picomatch nanomatch extglob braces expand-brackets Wildcard matching (*?+) ‚úî ‚úî ‚úî ‚úî - - - Advancing globbing ‚úî ‚úî ‚úî - - - - Brace matching ‚úî ‚úî ‚úî - - ‚úî - Brace expansion ‚úî ‚úî - - - ‚úî - Extglobs partial ‚úî ‚úî - ‚úî - - Posix brackets - ‚úî ‚úî - - - ‚úî Regular expression syntax - ‚úî ‚úî ‚úî ‚úî - ‚úî File system operations - - - - - - - Benchmarks Performance comparison of picomatch and minimatch. # .makeRe star picomatch x 1,993,050 ops/sec ¬±0.51% (91 runs sampled) minimatch x 627,206 ops/sec ¬±1.96% (87 runs sampled)) # .makeRe star; dot=true picomatch x 1,436,640 ops/sec ¬±0.62% (91 runs sampled) minimatch x 525,876 ops/sec ¬±0.60% (88 runs sampled) # .makeRe globstar picomatch x 1,592,742 ops/sec ¬±0.42% (90 runs sampled) minimatch x 962,043 ops/sec ¬±1.76% (91 runs sampled)d) # .makeRe globstars picomatch x 1,615,199 ops/sec ¬±0.35% (94 runs sampled) minimatch x 477,179 ops/sec ¬±1.33% (91 runs sampled) # .makeRe with leading star picomatch x 1,220,856 ops/sec ¬±0.40% (92 runs sampled) minimatch x 453,564 ops/sec ¬±1.43% (94 runs sampled) # .makeRe - basic braces picomatch x 392,067 ops/sec ¬±0.70% (90 runs sampled) minimatch x 99,532 ops/sec ¬±2.03% (87 runs sampled)) Philosophies The goal of this library is to be blazing fast, without compromising on accuracy. Accuracy The number one of goal of this library is accuracy. However, it's not unusual for different glob implementations to have different rules for matching behavior, even with simple wildcard matching. It gets increasingly more complicated when combinations of different features are combined, like when extglobs are combined with globstars, braces, slashes, and so on: !(**/{a,b,*/c}). Thus, given that there is no canonical glob specification to use as a single source of truth when differences of opinion arise regarding behavior, sometimes we have to implement our best judgement and rely on feedback from users to make improvements. Performance Although this library performs well in benchmarks, and in most cases it's faster than other popular libraries we benchmarked against, we will always choose accuracy over performance. It's not helpful to anyone if our library is faster at returning the wrong answer. About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Please read the contributing guide for advice on opening issues, pull requests, and coding standards. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: npm install -g verbose/verb#dev verb-generate-readme && verb Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile License Copyright ¬© 2017-present, Jon Schlinkert. Released under the MIT License."
  },
  "node_modules/pstree.remy/README.html": {
    "href": "node_modules/pstree.remy/README.html",
    "title": "pstree.remy",
    "keywords": "pstree.remy Cross platform ps-tree (including unix flavours without ps) Installation npm install pstree.remy Usage const psTree = psTree require('pstree.remy'); psTree(PID, (err, pids) => { if (err) { console.error(err); } console.log(pids) }); console.log(psTree.hasPS ? \"This platform has the ps shell command\" : \"This platform does not have the ps shell command\");"
  },
  "node_modules/readable-stream/CONTRIBUTING.html": {
    "href": "node_modules/readable-stream/CONTRIBUTING.html",
    "title": "Developer's Certificate of Origin 1.1",
    "keywords": "Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Moderation Policy The Node.js Moderation Policy applies to this WG. Code of Conduct The Node.js Code of Conduct applies to this WG."
  },
  "node_modules/readable-stream/GOVERNANCE.html": {
    "href": "node_modules/readable-stream/GOVERNANCE.html",
    "title": "",
    "keywords": "Streams Working Group The Node.js Streams is jointly governed by a Working Group (WG) that is responsible for high-level guidance of the project. The WG has final authority over this project including: Technical direction Project governance and process (including this policy) Contribution policy GitHub repository hosting Conduct guidelines Maintaining the list of additional Collaborators For the current list of WG members, see the project README.md. Collaborators The readable-stream GitHub repository is maintained by the WG and additional Collaborators who are added by the WG on an ongoing basis. Individuals making significant and valuable contributions are made Collaborators and given commit-access to the project. These individuals are identified by the WG and their addition as Collaborators is discussed during the WG meeting. Note: If you make a significant contribution and are not considered for commit-access log an issue or contact a WG member directly and it will be brought up in the next WG meeting. Modifications of the contents of the readable-stream repository are made on a collaborative basis. Anybody with a GitHub account may propose a modification via pull request and it will be considered by the project Collaborators. All pull requests must be reviewed and accepted by a Collaborator with sufficient expertise who is able to take full responsibility for the change. In the case of pull requests proposed by an existing Collaborator, an additional Collaborator is required for sign-off. Consensus should be sought if additional Collaborators participate and there is disagreement around a particular modification. See Consensus Seeking Process below for further detail on the consensus model used for governance. Collaborators may opt to elevate significant or controversial modifications, or modifications that have not found consensus to the WG for discussion by assigning the WG-agenda tag to a pull request or issue. The WG should serve as the final arbiter where required. For the current list of Collaborators, see the project README.md. WG Membership WG seats are not time-limited. There is no fixed size of the WG. However, the expected target is between 6 and 12, to ensure adequate coverage of important areas of expertise, balanced with the ability to make decisions efficiently. There is no specific set of requirements or qualifications for WG membership beyond these rules. The WG may add additional members to the WG by unanimous consensus. A WG member may be removed from the WG by voluntary resignation, or by unanimous consensus of all other WG members. Changes to WG membership should be posted in the agenda, and may be suggested as any other agenda item (see \"WG Meetings\" below). If an addition or removal is proposed during a meeting, and the full WG is not in attendance to participate, then the addition or removal is added to the agenda for the subsequent meeting. This is to ensure that all members are given the opportunity to participate in all membership decisions. If a WG member is unable to attend a meeting where a planned membership decision is being made, then their consent is assumed. No more than 1/3 of the WG members may be affiliated with the same employer. If removal or resignation of a WG member, or a change of employment by a WG member, creates a situation where more than 1/3 of the WG membership shares an employer, then the situation must be immediately remedied by the resignation or removal of one or more WG members affiliated with the over-represented employer(s). WG Meetings The WG meets occasionally on a Google Hangout On Air. A designated moderator approved by the WG runs the meeting. Each meeting should be published to YouTube. Items are added to the WG agenda that are considered contentious or are modifications of governance, contribution policy, WG membership, or release process. The intention of the agenda is not to approve or review all patches; that should happen continuously on GitHub and be handled by the larger group of Collaborators. Any community member or contributor can ask that something be added to the next meeting's agenda by logging a GitHub Issue. Any Collaborator, WG member or the moderator can add the item to the agenda by adding the WG-agenda tag to the issue. Prior to each WG meeting the moderator will share the Agenda with members of the WG. WG members can add any items they like to the agenda at the beginning of each meeting. The moderator and the WG cannot veto or remove items. The WG may invite persons or representatives from certain projects to participate in a non-voting capacity. The moderator is responsible for summarizing the discussion of each agenda item and sends it as a pull request after the meeting. Consensus Seeking Process The WG follows a Consensus Seeking decision-making model. When an agenda item has appeared to reach a consensus the moderator will ask \"Does anyone object?\" as a final call for dissent from the consensus. If an agenda item cannot reach a consensus a WG member can call for either a closing vote or a vote to table the issue to the next meeting. The call for a vote must be seconded by a majority of the WG or else the discussion will continue. Simple majority wins. Note that changes to WG membership require a majority consensus. See \"WG Membership\" above."
  },
  "node_modules/readable-stream/README.html": {
    "href": "node_modules/readable-stream/README.html",
    "title": "readable-stream",
    "keywords": "readable-stream Node.js core streams for userland npm install --save readable-stream This package is a mirror of the streams implementations in Node.js. Full documentation may be found on the Node.js website. If you want to guarantee a stable streams base, regardless of what version of Node you, or the users of your libraries are using, use readable-stream only and avoid the \"stream\" module in Node-core, for background see this blogpost. As of version 2.0.0 readable-stream uses semantic versioning. Version 3.x.x v3.x.x of readable-stream is a cut from Node 10. This version supports Node 6, 8, and 10, as well as evergreen browsers, IE 11 and latest Safari. The breaking changes introduced by v3 are composed by the combined breaking changes in Node v9 and Node v10, as follows: Error codes: https://github.com/nodejs/node/pull/13310, https://github.com/nodejs/node/pull/13291, https://github.com/nodejs/node/pull/16589, https://github.com/nodejs/node/pull/15042, https://github.com/nodejs/node/pull/15665, https://github.com/nodejs/readable-stream/pull/344 'readable' have precedence over flowing https://github.com/nodejs/node/pull/18994 make virtual methods errors consistent https://github.com/nodejs/node/pull/18813 updated streams error handling https://github.com/nodejs/node/pull/18438 writable.end should return this. https://github.com/nodejs/node/pull/18780 readable continues to read when push('') https://github.com/nodejs/node/pull/18211 add custom inspect to BufferList https://github.com/nodejs/node/pull/17907 always defer 'readable' with nextTick https://github.com/nodejs/node/pull/17979 Version 2.x.x v2.x.x of readable-stream is a cut of the stream module from Node 8 (there have been no semver-major changes from Node 4 to 8). This version supports all Node.js versions from 0.8, as well as evergreen browsers and IE 10 & 11. Big Thanks Cross-browser Testing Platform and Open Source <3 Provided by Sauce Labs Usage You can swap your require('stream') with require('readable-stream') without any changes, if you are just using one of the main classes and functions. const { Readable, Writable, Transform, Duplex, pipeline, finished } = require('readable-stream') Note that require('stream') will return Stream, while require('readable-stream') will return Readable. We discourage using whatever is exported directly, but rather use one of the properties as shown in the example above. Streams Working Group readable-stream is maintained by the Streams Working Group, which oversees the development and maintenance of the Streams API within Node.js. The responsibilities of the Streams Working Group include: Addressing stream issues on the Node.js issue tracker. Authoring and editing stream documentation within the Node.js project. Reviewing changes to stream subclasses within the Node.js project. Redirecting changes to streams from the Node.js project to this project. Assisting in the implementation of stream providers within Node.js. Recommending versions of readable-stream to be included in Node.js. Messaging about the future of streams to give the community advance notice of changes. Team Members Calvin Metcalf (@calvinmetcalf) <calvin.metcalf@gmail.com&gt; Release GPG key: F3EF5F62A87FC27A22E643F714CE4FF5015AA242 Mathias Buus (@mafintosh) <mathiasbuus@gmail.com&gt; Matteo Collina (@mcollina) <matteo.collina@gmail.com&gt; Release GPG key: 3ABC01543F22DD2239285CDD818674489FBC127E Irina Shestak (@lrlna) <shestak.irina@gmail.com&gt; Yoshua Wyuts (@yoshuawuyts) <yoshuawuyts@gmail.com&gt;"
  },
  "node_modules/readdirp/README.html": {
    "href": "node_modules/readdirp/README.html",
    "title": "readdirp",
    "keywords": "readdirp Recursive version of fs.readdir. Exposes a stream API and a promise API. npm install readdirp const readdirp = require('readdirp'); // Use streams to achieve small RAM & CPU footprint. // 1) Streams example with for-await. for await (const entry of readdirp('.')) { const {path} = entry; console.log(`${JSON.stringify({path})}`); } // 2) Streams example, non for-await. // Print out all JS files along with their size within the current folder & subfolders. readdirp('.', {fileFilter: '*.js', alwaysStat: true}) .on('data', (entry) => { const {path, stats: {size}} = entry; console.log(`${JSON.stringify({path, size})}`); }) // Optionally call stream.destroy() in `warn()` in order to abort and cause 'close' to be emitted .on('warn', error => console.error('non-fatal error', error)) .on('error', error => console.error('fatal error', error)) .on('end', () => console.log('done')); // 3) Promise example. More RAM and CPU than streams / for-await. const files = await readdirp.promise('.'); console.log(files.map(file => file.path)); // Other options. readdirp('test', { fileFilter: '*.js', directoryFilter: ['!.git', '!*modules'] // directoryFilter: (di) => di.basename.length === 9 type: 'files_directories', depth: 1 }); For more examples, check out examples directory. API const stream = readdirp(root[, options]) ‚Äî Stream API Reads given root recursively and returns a stream of entry infos Optionally can be used like for await (const entry of stream) with node.js 10+ (asyncIterator). on('data', (entry) => {}) entry info for every file / dir. on('warn', (error) => {}) non-fatal Error that prevents a file / dir from being processed. Example: inaccessible to the user. on('error', (error) => {}) fatal Error which also ends the stream. Example: illegal options where passed. on('end') ‚Äî we are done. Called when all entries were found and no more will be emitted. on('close') ‚Äî stream is destroyed via stream.destroy(). Could be useful if you want to manually abort even on a non fatal error. At that point the stream is no longer readable and no more entries, warning or errors are emitted To learn more about streams, consult the very detailed nodejs streams documentation or the stream-handbook const entries = await readdirp.promise(root[, options]) ‚Äî Promise API. Returns a list of entry infos. First argument is awalys root, path in which to start reading and recursing into subdirectories. options fileFilter: [\"*.js\"]: filter to include or exclude files. A Function, Glob string or Array of glob strings. Function: a function that takes an entry info as a parameter and returns true to include or false to exclude the entry Glob string: a string (e.g., *.js) which is matched using picomatch, so go there for more information. Globstars (**) are not supported since specifying a recursive pattern for an already recursive function doesn't make sense. Negated globs (as explained in the minimatch documentation) are allowed, e.g., !*.txt matches everything but text files. Array of glob strings: either need to be all inclusive or all exclusive (negated) patterns otherwise an error is thrown. ['*.json', '*.js'] includes all JavaScript and Json files. ['!.git', '!node_modules'] includes all directories except the '.git' and 'node_modules'. Directories that do not pass a filter will not be recursed into. directoryFilter: ['!.git']: filter to include/exclude directories found and to recurse into. Directories that do not pass a filter will not be recursed into. depth: 5: depth at which to stop recursing even if more subdirectories are found type: 'files': determines if data events on the stream should be emitted for 'files' (default), 'directories', 'files_directories', or 'all'. Setting to 'all' will also include entries for other types of file descriptors like character devices, unix sockets and named pipes. alwaysStat: false: always return stats property for every file. Default is false, readdirp will return Dirent entries. Setting it to true can double readdir execution time - use it only when you need file size, mtime etc. Cannot be enabled on node <10.10.0. lstat: false: include symlink entries in the stream along with files. When true, fs.lstat would be used instead of fs.stat EntryInfo Has the following properties: path: 'assets/javascripts/react.js': path to the file/directory (relative to given root) fullPath: '/Users/dev/projects/app/assets/javascripts/react.js': full path to the file/directory found basename: 'react.js': name of the file/directory dirent: fs.Dirent: built-in dir entry object - only with alwaysStat: false stats: fs.Stats: built in stat object - only with alwaysStat: true Changelog 3.5 (Oct 13, 2020) disallows recursive directory-based symlinks. Before, it could have entered infinite loop. 3.4 (Mar 19, 2020) adds support for directory-based symlinks. 3.3 (Dec 6, 2019) stabilizes RAM consumption and enables perf management with highWaterMark option. Fixes race conditions related to for-await looping. 3.2 (Oct 14, 2019) improves performance by 250% and makes streams implementation more idiomatic. 3.1 (Jul 7, 2019) brings bigint support to stat output on Windows. This is backwards-incompatible for some cases. Be careful. It you use it incorrectly, you'll see \"TypeError: Cannot mix BigInt and other types, use explicit conversions\". 3.0 brings huge performance improvements and stream backpressure support. Upgrading 2.x to 3.x: Signature changed from readdirp(options) to readdirp(root, options) Replaced callback API with promise API. Renamed entryType option to type Renamed entryType: 'both' to 'files_directories' EntryInfo Renamed stat to stats Emitted only when alwaysStat: true dirent is emitted instead of stats by default with alwaysStat: false Renamed name to basename Removed parentDir and fullParentDir properties Supported node.js versions: 3.x: node 8+ 2.x: node 0.6+ License Copyright (c) 2012-2019 Thorsten Lorenz, Paul Miller (https://paulmillr.com) MIT License, see LICENSE file."
  },
  "node_modules/safe-buffer/README.html": {
    "href": "node_modules/safe-buffer/README.html",
    "title": "safe-buffer",
    "keywords": "safe-buffer Safer Node.js Buffer API Use the new Node.js Buffer APIs (Buffer.from, Buffer.alloc, Buffer.allocUnsafe, Buffer.allocUnsafeSlow) in all versions of Node.js. Uses the built-in implementation when available. install npm install safe-buffer usage The goal of this package is to provide a safe replacement for the node.js Buffer. It's a drop-in replacement for Buffer. You can use it by adding one require line to the top of your node.js modules: var Buffer = require('safe-buffer').Buffer // Existing buffer code will continue to work without issues: new Buffer('hey', 'utf8') new Buffer([1, 2, 3], 'utf8') new Buffer(obj) new Buffer(16) // create an uninitialized buffer (potentially unsafe) // But you can use these new explicit APIs to make clear what you want: Buffer.from('hey', 'utf8') // convert from many types to a Buffer Buffer.alloc(16) // create a zero-filled buffer (safe) Buffer.allocUnsafe(16) // create an uninitialized buffer (potentially unsafe) api Class Method: Buffer.from(array) array {Array} Allocates a new Buffer using an array of octets. const buf = Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]); // creates a new Buffer containing ASCII bytes // ['b','u','f','f','e','r'] A TypeError will be thrown if array is not an Array. Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]]) arrayBuffer {ArrayBuffer} The .buffer property of a TypedArray or a new ArrayBuffer() byteOffset {Number} Default: 0 length {Number} Default: arrayBuffer.length - byteOffset When passed a reference to the .buffer property of a TypedArray instance, the newly created Buffer will share the same allocated memory as the TypedArray. const arr = new Uint16Array(2); arr[0] = 5000; arr[1] = 4000; const buf = Buffer.from(arr.buffer); // shares the memory with arr; console.log(buf); // Prints: <Buffer 88 13 a0 0f> // changing the TypedArray changes the Buffer also arr[1] = 6000; console.log(buf); // Prints: <Buffer 88 13 70 17> The optional byteOffset and length arguments specify a memory range within the arrayBuffer that will be shared by the Buffer. const ab = new ArrayBuffer(10); const buf = Buffer.from(ab, 0, 2); console.log(buf.length); // Prints: 2 A TypeError will be thrown if arrayBuffer is not an ArrayBuffer. Class Method: Buffer.from(buffer) buffer {Buffer} Copies the passed buffer data onto a new Buffer instance. const buf1 = Buffer.from('buffer'); const buf2 = Buffer.from(buf1); buf1[0] = 0x61; console.log(buf1.toString()); // 'auffer' console.log(buf2.toString()); // 'buffer' (copy is not changed) A TypeError will be thrown if buffer is not a Buffer. Class Method: Buffer.from(str[, encoding]) str {String} String to encode. encoding {String} Encoding to use, Default: 'utf8' Creates a new Buffer containing the given JavaScript string str. If provided, the encoding parameter identifies the character encoding. If not provided, encoding defaults to 'utf8'. const buf1 = Buffer.from('this is a t√©st'); console.log(buf1.toString()); // prints: this is a t√©st console.log(buf1.toString('ascii')); // prints: this is a tC)st const buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex'); console.log(buf2.toString()); // prints: this is a t√©st A TypeError will be thrown if str is not a string. Class Method: Buffer.alloc(size[, fill[, encoding]]) size {Number} fill {Value} Default: undefined encoding {String} Default: utf8 Allocates a new Buffer of size bytes. If fill is undefined, the Buffer will be zero-filled. const buf = Buffer.alloc(5); console.log(buf); // <Buffer 00 00 00 00 00> The size must be less than or equal to the value of require('buffer').kMaxLength (on 64-bit architectures, kMaxLength is (2^31)-1). Otherwise, a [RangeError][] is thrown. A zero-length Buffer will be created if a size less than or equal to 0 is specified. If fill is specified, the allocated Buffer will be initialized by calling buf.fill(fill). See [buf.fill()][] for more information. const buf = Buffer.alloc(5, 'a'); console.log(buf); // <Buffer 61 61 61 61 61> If both fill and encoding are specified, the allocated Buffer will be initialized by calling buf.fill(fill, encoding). For example: const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64'); console.log(buf); // <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64> Calling Buffer.alloc(size) can be significantly slower than the alternative Buffer.allocUnsafe(size) but ensures that the newly created Buffer instance contents will never contain sensitive data. A TypeError will be thrown if size is not a number. Class Method: Buffer.allocUnsafe(size) size {Number} Allocates a new non-zero-filled Buffer of size bytes. The size must be less than or equal to the value of require('buffer').kMaxLength (on 64-bit architectures, kMaxLength is (2^31)-1). Otherwise, a [RangeError][] is thrown. A zero-length Buffer will be created if a size less than or equal to 0 is specified. The underlying memory for Buffer instances created in this way is not initialized. The contents of the newly created Buffer are unknown and may contain sensitive data. Use [buf.fill(0)][] to initialize such Buffer instances to zeroes. const buf = Buffer.allocUnsafe(5); console.log(buf); // <Buffer 78 e0 82 02 01> // (octets will be different, every time) buf.fill(0); console.log(buf); // <Buffer 00 00 00 00 00> A TypeError will be thrown if size is not a number. Note that the Buffer module pre-allocates an internal Buffer instance of size Buffer.poolSize that is used as a pool for the fast allocation of new Buffer instances created using Buffer.allocUnsafe(size) (and the deprecated new Buffer(size) constructor) only when size is less than or equal to Buffer.poolSize >> 1 (floor of Buffer.poolSize divided by two). The default value of Buffer.poolSize is 8192 but can be modified. Use of this pre-allocated internal memory pool is a key difference between calling Buffer.alloc(size, fill) vs. Buffer.allocUnsafe(size).fill(fill). Specifically, Buffer.alloc(size, fill) will never use the internal Buffer pool, while Buffer.allocUnsafe(size).fill(fill) will use the internal Buffer pool if size is less than or equal to half Buffer.poolSize. The difference is subtle but can be important when an application requires the additional performance that Buffer.allocUnsafe(size) provides. Class Method: Buffer.allocUnsafeSlow(size) size {Number} Allocates a new non-zero-filled and non-pooled Buffer of size bytes. The size must be less than or equal to the value of require('buffer').kMaxLength (on 64-bit architectures, kMaxLength is (2^31)-1). Otherwise, a [RangeError][] is thrown. A zero-length Buffer will be created if a size less than or equal to 0 is specified. The underlying memory for Buffer instances created in this way is not initialized. The contents of the newly created Buffer are unknown and may contain sensitive data. Use [buf.fill(0)][] to initialize such Buffer instances to zeroes. When using Buffer.allocUnsafe() to allocate new Buffer instances, allocations under 4KB are, by default, sliced from a single pre-allocated Buffer. This allows applications to avoid the garbage collection overhead of creating many individually allocated Buffers. This approach improves both performance and memory usage by eliminating the need to track and cleanup as many Persistent objects. However, in the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled Buffer instance using Buffer.allocUnsafeSlow() then copy out the relevant bits. // need to keep around a few small chunks of memory const store = []; socket.on('readable', () => { const data = socket.read(); // allocate for retained data const sb = Buffer.allocUnsafeSlow(10); // copy the data into the new allocation data.copy(sb, 0, 0, 10); store.push(sb); }); Use of Buffer.allocUnsafeSlow() should be used only as a last resort after a developer has observed undue memory retention in their applications. A TypeError will be thrown if size is not a number. All the Rest The rest of the Buffer API is exactly the same as in node.js. See the docs. Related links Node.js issue: Buffer(number) is unsafe Node.js Enhancement Proposal: Buffer.from/Buffer.alloc/Buffer.zalloc/Buffer() soft-deprecate Why is Buffer unsafe? Today, the node.js Buffer constructor is overloaded to handle many different argument types like String, Array, Object, TypedArrayView (Uint8Array, etc.), ArrayBuffer, and also Number. The API is optimized for convenience: you can throw any type at it, and it will try to do what you want. Because the Buffer constructor is so powerful, you often see code like this: // Convert UTF-8 strings to hex function toHex (str) { return new Buffer(str).toString('hex') } But what happens if toHex is called with a Number argument? Remote Memory Disclosure If an attacker can make your program call the Buffer constructor with a Number argument, then they can make it allocate uninitialized memory from the node.js process. This could potentially disclose TLS private keys, user data, or database passwords. When the Buffer constructor is passed a Number argument, it returns an UNINITIALIZED block of memory of the specified size. When you create a Buffer like this, you MUST overwrite the contents before returning it to the user. From the node.js docs: new Buffer(size) size Number The underlying memory for Buffer instances created in this way is not initialized. The contents of a newly created Buffer are unknown and could contain sensitive data. Use buf.fill(0) to initialize a Buffer to zeroes. (Emphasis our own.) Whenever the programmer intended to create an uninitialized Buffer you often see code like this: var buf = new Buffer(16) // Immediately overwrite the uninitialized buffer with data from another buffer for (var i = 0; i < buf.length; i++) { buf[i] = otherBuf[i] } Would this ever be a problem in real code? Yes. It's surprisingly common to forget to check the type of your variables in a dynamically-typed language like JavaScript. Usually the consequences of assuming the wrong type is that your program crashes with an uncaught exception. But the failure mode for forgetting to check the type of arguments to the Buffer constructor is more catastrophic. Here's an example of a vulnerable service that takes a JSON payload and converts it to hex: // Take a JSON payload {str: \"some string\"} and convert it to hex var server = http.createServer(function (req, res) { var data = '' req.setEncoding('utf8') req.on('data', function (chunk) { data += chunk }) req.on('end', function () { var body = JSON.parse(data) res.end(new Buffer(body.str).toString('hex')) }) }) server.listen(8080) In this example, an http client just has to send: { \"str\": 1000 } and it will get back 1,000 bytes of uninitialized memory from the server. This is a very serious bug. It's similar in severity to the the Heartbleed bug that allowed disclosure of OpenSSL process memory by remote attackers. Which real-world packages were vulnerable? bittorrent-dht Mathias Buus and I (Feross Aboukhadijeh) found this issue in one of our own packages, bittorrent-dht. The bug would allow anyone on the internet to send a series of messages to a user of bittorrent-dht and get them to reveal 20 bytes at a time of uninitialized memory from the node.js process. Here's the commit that fixed it. We released a new fixed version, created a Node Security Project disclosure, and deprecated all vulnerable versions on npm so users will get a warning to upgrade to a newer version. ws That got us wondering if there were other vulnerable packages. Sure enough, within a short period of time, we found the same issue in ws, the most popular WebSocket implementation in node.js. If certain APIs were called with Number parameters instead of String or Buffer as expected, then uninitialized server memory would be disclosed to the remote peer. These were the vulnerable methods: socket.send(number) socket.ping(number) socket.pong(number) Here's a vulnerable socket server with some echo functionality: server.on('connection', function (socket) { socket.on('message', function (message) { message = JSON.parse(message) if (message.type === 'echo') { socket.send(message.data) // send back the user's message } }) }) socket.send(number) called on the server, will disclose server memory. Here's the release where the issue was fixed, with a more detailed explanation. Props to Arnout Kazemier for the quick fix. Here's the Node Security Project disclosure. What's the solution? It's important that node.js offers a fast way to get memory otherwise performance-critical applications would needlessly get a lot slower. But we need a better way to signal our intent as programmers. When we want uninitialized memory, we should request it explicitly. Sensitive functionality should not be packed into a developer-friendly API that loosely accepts many different types. This type of API encourages the lazy practice of passing variables in without checking the type very carefully. A new API: Buffer.allocUnsafe(number) The functionality of creating buffers with uninitialized memory should be part of another API. We propose Buffer.allocUnsafe(number). This way, it's not part of an API that frequently gets user input of all sorts of different types passed into it. var buf = Buffer.allocUnsafe(16) // careful, uninitialized memory! // Immediately overwrite the uninitialized buffer with data from another buffer for (var i = 0; i < buf.length; i++) { buf[i] = otherBuf[i] } How do we fix node.js core? We sent a PR to node.js core (merged as semver-major) which defends against one case: var str = 16 new Buffer(str, 'utf8') In this situation, it's implied that the programmer intended the first argument to be a string, since they passed an encoding as a second argument. Today, node.js will allocate uninitialized memory in the case of new Buffer(number, encoding), which is probably not what the programmer intended. But this is only a partial solution, since if the programmer does new Buffer(variable) (without an encoding parameter) there's no way to know what they intended. If variable is sometimes a number, then uninitialized memory will sometimes be returned. What's the real long-term fix? We could deprecate and remove new Buffer(number) and use Buffer.allocUnsafe(number) when we need uninitialized memory. But that would break 1000s of packages. We believe the best solution is to: 1. Change new Buffer(number) to return safe, zeroed-out memory 2. Create a new API for creating uninitialized Buffers. We propose: Buffer.allocUnsafe(number) Update We now support adding three new APIs: Buffer.from(value) - convert from any type to a buffer Buffer.alloc(size) - create a zero-filled buffer Buffer.allocUnsafe(size) - create an uninitialized buffer with given size This solves the core problem that affected ws and bittorrent-dht which is Buffer(variable) getting tricked into taking a number argument. This way, existing code continues working and the impact on the npm ecosystem will be minimal. Over time, npm maintainers can migrate performance-critical code to use Buffer.allocUnsafe(number) instead of new Buffer(number). Conclusion We think there's a serious design issue with the Buffer API as it exists today. It promotes insecure software by putting high-risk functionality into a convenient API with friendly \"developer ergonomics\". This wasn't merely a theoretical exercise because we found the issue in some of the most popular npm packages. Fortunately, there's an easy fix that can be applied today. Use safe-buffer in place of buffer. var Buffer = require('safe-buffer').Buffer Eventually, we hope that node.js core can switch to this new, safer behavior. We believe the impact on the ecosystem would be minimal since it's not a breaking change. Well-maintained, popular packages would be updated to use Buffer.alloc quickly, while older, insecure packages would magically become safe from this attack vector. links Node.js PR: buffer: throw if both length and enc are passed Node Security Project disclosure for ws Node Security Project disclosure forbittorrent-dht credit The original issues in bittorrent-dht (disclosure) and ws (disclosure) were discovered by Mathias Buus and Feross Aboukhadijeh. Thanks to Adam Baldwin for helping disclose these issues and for his work running the Node Security Project. Thanks to John Hiesey for proofreading this README and auditing the code. license MIT. Copyright (C) Feross Aboukhadijeh"
  },
  "node_modules/semver/README.html": {
    "href": "node_modules/semver/README.html",
    "title": "semver(1) -- The semantic versioner for npm",
    "keywords": "semver(1) -- The semantic versioner for npm Install npm install --save semver Usage As a node module: const semver = require('semver') semver.valid('1.2.3') // '1.2.3' semver.valid('a.b.c') // null semver.clean(' =v1.2.3 ') // '1.2.3' semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true semver.gt('1.2.3', '9.8.7') // false semver.lt('1.2.3', '9.8.7') // true semver.minVersion('>=1.0.0') // '1.0.0' semver.valid(semver.coerce('v2')) // '2.0.0' semver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7' As a command-line utility: $ semver -h A JavaScript implementation of the https://semver.org/ specification Copyright Isaac Z. Schlueter Usage: semver [options] <version> [<version> [...]] Prints valid versions sorted by SemVer precedence Options: -r --range <range> Print versions that match the specified range. -i --increment [<level>] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease. Default level is 'patch'. Only one version may be specified. --preid <identifier> Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. -l --loose Interpret versions and ranges loosely -p --include-prerelease Always include prerelease versions in range matching -c --coerce Coerce a string into SemVer if possible (does not imply --loose) Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no satisfying versions are found, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. Versions A \"version\" is described by the v2.0.0 specification found at https://semver.org/. A leading \"=\" or \"v\" character is stripped off and ignored. Ranges A version range is a set of comparators which specify versions that satisfy the range. A comparator is composed of an operator and a version. The set of primitive operators is: < Less than <= Less than or equal to > Greater than >= Greater than or equal to = Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator >=1.2.7 would match the versions 1.2.7, 1.2.8, 2.5.3, and 1.3.9, but not the versions 1.2.6 or 1.1.0. Comparators can be joined by whitespace to form a comparator set, which is satisfied by the intersection of all of the comparators it includes. A range is composed of one or more comparator sets, joined by ||. A version matches a range if and only if every comparator in at least one of the ||-separated comparator sets is satisfied by the version. For example, the range >=1.2.7 <1.3.0 would match the versions 1.2.7, 1.2.8, and 1.2.99, but not the versions 1.2.6, 1.3.0, or 1.1.0. The range 1.2.7 || >=1.2.9 <2.0.0 would match the versions 1.2.7, 1.2.9, and 1.4.6, but not the versions 1.2.8 or 2.0.0. Prerelease Tags If a version has a prerelease tag (for example, 1.2.3-alpha.3) then it will only be allowed to satisfy comparator sets if at least one comparator with the same [major, minor, patch] tuple also has a prerelease tag. For example, the range >1.2.3-alpha.3 would be allowed to match the version 1.2.3-alpha.7, but it would not be satisfied by 3.4.5-alpha.9, even though 3.4.5-alpha.9 is technically \"greater than\" 1.2.3-alpha.3 according to the SemVer sort rules. The version range only accepts prerelease tags on the 1.2.3 version. The version 3.4.5 would satisfy the range, because it does not have a prerelease flag, and 3.4.5 is greater than 1.2.3-alpha.7. The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics. Second, a user who has opted into using a prerelease version has clearly indicated the intent to use that specific set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the next set of prerelease versions. Note that this behavior can be suppressed (treating all prerelease versions as if they were normal versions, for the purpose of range matching) by setting the includePrerelease flag on the options object to any functions that do range matching. Prerelease Identifiers The method .inc takes an additional identifier string argument that will append the value of the string as a prerelease identifier: semver.inc('1.2.3', 'prerelease', 'beta') // '1.2.4-beta.0' command-line example: $ semver 1.2.3 -i prerelease --preid beta 1.2.4-beta.0 Which then can be used to increment further: $ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or ||. Hyphen Ranges X.Y.Z - A.B.C Specifies an inclusive set. 1.2.3 - 2.3.4 := >=1.2.3 <=2.3.4 If a partial version is provided as the first version in the inclusive range, then the missing pieces are replaced with zeroes. 1.2 - 2.3.4 := >=1.2.0 <=2.3.4 If a partial version is provided as the second version in the inclusive range, then all versions that start with the supplied parts of the tuple are accepted, but nothing that would be greater than the provided tuple parts. 1.2.3 - 2.3 := >=1.2.3 <2.4.0 1.2.3 - 2 := >=1.2.3 <3.0.0 X-Ranges 1.2.x 1.X 1.2.* * Any of X, x, or * may be used to \"stand in\" for one of the numeric values in the [major, minor, patch] tuple. * := >=0.0.0 (Any version satisfies) 1.x := >=1.0.0 <2.0.0 (Matching major version) 1.2.x := >=1.2.0 <1.3.0 (Matching major and minor versions) A partial version range is treated as an X-Range, so the special character is in fact optional. \"\" (empty string) := * := >=0.0.0 1 := 1.x.x := >=1.0.0 <2.0.0 1.2 := 1.2.x := >=1.2.0 <1.3.0 Tilde Ranges ~1.2.3 ~1.2 ~1 Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not. ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0 ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (Same as 1.2.x) ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (Same as 1.x) ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0 ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0 (Same as 0.2.x) ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0 (Same as 0.x) ~1.2.3-beta.2 := >=1.2.3-beta.2 <1.3.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. Caret Ranges ^1.2.3 ^0.2.5 ^0.0.4 Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0, and no updates for versions 0.0.X. Many authors treat a 0.x version as if the x were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice. However, it presumes that there will not be breaking changes between 0.2.4 and 0.2.5. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. ^1.2.3 := >=1.2.3 <2.0.0 ^0.2.3 := >=0.2.3 <0.3.0 ^0.0.3 := >=0.0.3 <0.0.4 ^1.2.3-beta.2 := >=1.2.3-beta.2 <2.0.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. ^0.0.3-beta := >=0.0.3-beta <0.0.4 Note that prereleases in the 0.0.3 version only will be allowed, if they are greater than or equal to beta. So, 0.0.3-pr.2 would be allowed. When parsing caret ranges, a missing patch value desugars to the number 0, but will allow flexibility within that value, even if the major and minor versions are both 0. ^1.2.x := >=1.2.0 <2.0.0 ^0.0.x := >=0.0.0 <0.1.0 ^0.0 := >=0.0.0 <0.1.0 A missing minor and patch values will desugar to zero, but also allow flexibility within those values, even if the major version is zero. ^1.x := >=1.0.0 <2.0.0 ^0.x := >=0.0.0 <1.0.0 Range Grammar Putting all this together, here is a Backus-Naur grammar for ranges, for the benefit of parser authors: range-set ::= range ( logical-or range ) * logical-or ::= ( ' ' ) * '||' ( ' ' ) * range ::= hyphen | simple ( ' ' simple ) * | '' hyphen ::= partial ' - ' partial simple ::= primitive | partial | tilde | caret primitive ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial partial ::= xr ( '.' xr ( '.' xr qualifier ? )? )? xr ::= 'x' | 'X' | '*' | nr nr ::= '0' | ['1'-'9'] ( ['0'-'9'] ) * tilde ::= '~' partial caret ::= '^' partial qualifier ::= ( '-' pre )? ( '+' build )? pre ::= parts build ::= parts parts ::= part ( '.' part ) * part ::= nr | [-0-9A-Za-z]+ Functions All methods and classes take a final options object argument. All options in this object are false by default. The options supported are: loose Be more forgiving about not-quite-valid semver strings. (Any resulting output will always be 100% strict compliant, of course.) For backwards compatibility reasons, if the options argument is a boolean value instead of an object, it is interpreted to be the loose param. includePrerelease Set to suppress the default behavior of excluding prerelease tagged versions from ranges unless they are explicitly opted into. Strict-mode Comparators and Ranges will be strict about the SemVer strings that they parse. valid(v): Return the parsed version, or null if it's not valid. inc(v, release): Return the version incremented by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if it's not valid premajor in one call will bump the version up to the next major version and down to a prerelease of that major version. preminor, and prepatch work the same way. If called from a non-prerelease version, the prerelease will work the same as prepatch. It increments the patch version, then makes a prerelease. If the input version is already a prerelease it simply increments it. prerelease(v): Returns an array of prerelease components, or null if none exist. Example: prerelease('1.2.3-alpha.1') -> ['alpha', 1] major(v): Return the major version number. minor(v): Return the minor version number. patch(v): Return the patch version number. intersects(r1, r2, loose): Return true if the two supplied ranges or comparators intersect. parse(v): Attempt to parse a string as a semantic version, returning either a SemVer object or null. Comparison gt(v1, v2): v1 > v2 gte(v1, v2): v1 >= v2 lt(v1, v2): v1 < v2 lte(v1, v2): v1 <= v2 eq(v1, v2): v1 == v2 This is true if they're logically equivalent, even if they're not the exact same string. You already know how to compare strings. neq(v1, v2): v1 != v2 The opposite of eq. cmp(v1, comparator, v2): Pass in a comparison string, and it'll call the corresponding function above. \"===\" and \"!==\" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided. compare(v1, v2): Return 0 if v1 == v2, or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort(). rcompare(v1, v2): The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort(). diff(v1, v2): Returns difference between two versions by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if the versions are the same. Comparators intersects(comparator): Return true if the comparators intersect Ranges validRange(range): Return the valid range or null if it's not valid satisfies(version, range): Return true if the version satisfies the range. maxSatisfying(versions, range): Return the highest version in the list that satisfies the range, or null if none of them do. minSatisfying(versions, range): Return the lowest version in the list that satisfies the range, or null if none of them do. minVersion(range): Return the lowest version that can possibly match the given range. gtr(version, range): Return true if version is greater than all the versions possible in the range. ltr(version, range): Return true if version is less than all the versions possible in the range. outside(version, range, hilo): Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<'. (This is the function called by gtr and ltr.) intersects(range): Return true if any of the ranges comparators intersect Note that, since ranges may be non-contiguous, a version might not be greater than a range, less than a range, or satisfy a range! For example, the range 1.2 <1.2.9 || >2.0.0 would have a hole from 1.2.9 until 2.0.0, so the version 1.2.10 would not be greater than the range (because 2.0.1 satisfies, which is higher), nor less than the range (since 1.2.8 satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the satisfies(version, range) function. Coercion coerce(version): Coerces a string to semver if possible This aims to provide a very forgiving translation of a non-semver string to semver. It looks for the first digit in a string, and consumes all remaining characters which satisfy at least a partial semver (e.g., 1, 1.2, 1.2.3) up to the max permitted length (256 characters). Longer versions are simply truncated (4.6.3.9.2-alpha2 becomes 4.6.3). All surrounding text is simply ignored (v3.4 replaces v3.3.1 becomes 3.4.0). Only text which lacks digits will fail coercion (version one is not valid). The maximum length for any semver component considered for coercion is 16 characters; longer components will be ignored (10000000000000000.4.7.4 becomes 4.7.4). The maximum value for any semver component is Number.MAX_SAFE_INTEGER || (2**53 - 1); higher value components are invalid (9999999999999999.4.7.4 is likely invalid)."
  },
  "node_modules/simple-update-notifier/README.html": {
    "href": "node_modules/simple-update-notifier/README.html",
    "title": "simple-update-notifier",
    "keywords": "simple-update-notifier Simple update notifier to check for npm updates for cli applications. Checks for updates for an npm module and outputs to the command line if there is one available. The result is cached for the specified time so it doesn't check every time the app runs. Install npm install simple-update-notifier OR yarn add simple-update-notifier Usage import updateNotifier from 'simple-update-notifier'; import packageJson from './package.json' assert { type: 'json' }; updateNotifier({ pkg: packageJson }); Options pkg Type: object name Required Type: string version Required Type: string updateCheckInterval Type: number Default: 1000 * 60 * 60 * 24 (1 day) How often to check for updates. shouldNotifyInNpmScript Type: boolean Default: false Allows notification to be shown when running as an npm script. distTag Type: string Default: 'latest' Which dist-tag to use to find the latest version. alwaysRun Type: boolean Default: false When set, updateCheckInterval will not be respected and a check for an update will always be performed. debug Type: boolean Default: false When set, logs explaining the decision will be output to stderr whenever the module opts to not print an update notification"
  },
  "node_modules/simple-update-notifier/node_modules/semver/CHANGELOG.html": {
    "href": "node_modules/simple-update-notifier/node_modules/semver/CHANGELOG.html",
    "title": "changes log",
    "keywords": "changes log 6.3.0 Expose the token enum on the exports 6.2.0 Coerce numbers to strings when passed to semver.coerce() Add rtl option to coerce from right to left 6.1.3 Handle X-ranges properly in includePrerelease mode 6.1.2 Do not throw when testing invalid version strings 6.1.1 Add options support for semver.coerce() Handle undefined version passed to Range.test 6.1.0 Add semver.compareBuild function Support * in semver.intersects 6.0 Fix intersects logic. This is technically a bug fix, but since it is also a change to behavior that may require users updating their code, it is marked as a major version increment. 5.7 Add minVersion method 5.6 Move boolean loose param to an options object, with backwards-compatibility protection. Add ability to opt out of special prerelease version handling with the includePrerelease option flag. 5.5 Add version coercion capabilities 5.4 Add intersection checking 5.3 Add minSatisfying method 5.2 Add prerelease(v) that returns prerelease components 5.1 Add Backus-Naur for ranges Remove excessively cute inspection methods 5.0 Remove AMD/Browserified build artifacts Fix ltr and gtr when using the * range Fix for range * with a prerelease identifier"
  },
  "node_modules/simple-update-notifier/node_modules/semver/README.html": {
    "href": "node_modules/simple-update-notifier/node_modules/semver/README.html",
    "title": "semver(1) -- The semantic versioner for npm",
    "keywords": "semver(1) -- The semantic versioner for npm Install npm install semver Usage As a node module: const semver = require('semver') semver.valid('1.2.3') // '1.2.3' semver.valid('a.b.c') // null semver.clean(' =v1.2.3 ') // '1.2.3' semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true semver.gt('1.2.3', '9.8.7') // false semver.lt('1.2.3', '9.8.7') // true semver.minVersion('>=1.0.0') // '1.0.0' semver.valid(semver.coerce('v2')) // '2.0.0' semver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7' As a command-line utility: $ semver -h A JavaScript implementation of the https://semver.org/ specification Copyright Isaac Z. Schlueter Usage: semver [options] <version> [<version> [...]] Prints valid versions sorted by SemVer precedence Options: -r --range <range> Print versions that match the specified range. -i --increment [<level>] Increment a version by the specified level. Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease. Default level is 'patch'. Only one version may be specified. --preid <identifier> Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments. -l --loose Interpret versions and ranges loosely -p --include-prerelease Always include prerelease versions in range matching -c --coerce Coerce a string into SemVer if possible (does not imply --loose) --rtl Coerce version strings right to left --ltr Coerce version strings left to right (default) Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions. If no satisfying versions are found, then exits failure. Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. Versions A \"version\" is described by the v2.0.0 specification found at https://semver.org/. A leading \"=\" or \"v\" character is stripped off and ignored. Ranges A version range is a set of comparators which specify versions that satisfy the range. A comparator is composed of an operator and a version. The set of primitive operators is: < Less than <= Less than or equal to > Greater than >= Greater than or equal to = Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator >=1.2.7 would match the versions 1.2.7, 1.2.8, 2.5.3, and 1.3.9, but not the versions 1.2.6 or 1.1.0. Comparators can be joined by whitespace to form a comparator set, which is satisfied by the intersection of all of the comparators it includes. A range is composed of one or more comparator sets, joined by ||. A version matches a range if and only if every comparator in at least one of the ||-separated comparator sets is satisfied by the version. For example, the range >=1.2.7 <1.3.0 would match the versions 1.2.7, 1.2.8, and 1.2.99, but not the versions 1.2.6, 1.3.0, or 1.1.0. The range 1.2.7 || >=1.2.9 <2.0.0 would match the versions 1.2.7, 1.2.9, and 1.4.6, but not the versions 1.2.8 or 2.0.0. Prerelease Tags If a version has a prerelease tag (for example, 1.2.3-alpha.3) then it will only be allowed to satisfy comparator sets if at least one comparator with the same [major, minor, patch] tuple also has a prerelease tag. For example, the range >1.2.3-alpha.3 would be allowed to match the version 1.2.3-alpha.7, but it would not be satisfied by 3.4.5-alpha.9, even though 3.4.5-alpha.9 is technically \"greater than\" 1.2.3-alpha.3 according to the SemVer sort rules. The version range only accepts prerelease tags on the 1.2.3 version. The version 3.4.5 would satisfy the range, because it does not have a prerelease flag, and 3.4.5 is greater than 1.2.3-alpha.7. The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics. Second, a user who has opted into using a prerelease version has clearly indicated the intent to use that specific set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the next set of prerelease versions. Note that this behavior can be suppressed (treating all prerelease versions as if they were normal versions, for the purpose of range matching) by setting the includePrerelease flag on the options object to any functions that do range matching. Prerelease Identifiers The method .inc takes an additional identifier string argument that will append the value of the string as a prerelease identifier: semver.inc('1.2.3', 'prerelease', 'beta') // '1.2.4-beta.0' command-line example: $ semver 1.2.3 -i prerelease --preid beta 1.2.4-beta.0 Which then can be used to increment further: $ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways. Advanced ranges may be combined in the same way as primitive comparators using white space or ||. Hyphen Ranges X.Y.Z - A.B.C Specifies an inclusive set. 1.2.3 - 2.3.4 := >=1.2.3 <=2.3.4 If a partial version is provided as the first version in the inclusive range, then the missing pieces are replaced with zeroes. 1.2 - 2.3.4 := >=1.2.0 <=2.3.4 If a partial version is provided as the second version in the inclusive range, then all versions that start with the supplied parts of the tuple are accepted, but nothing that would be greater than the provided tuple parts. 1.2.3 - 2.3 := >=1.2.3 <2.4.0 1.2.3 - 2 := >=1.2.3 <3.0.0 X-Ranges 1.2.x 1.X 1.2.* * Any of X, x, or * may be used to \"stand in\" for one of the numeric values in the [major, minor, patch] tuple. * := >=0.0.0 (Any version satisfies) 1.x := >=1.0.0 <2.0.0 (Matching major version) 1.2.x := >=1.2.0 <1.3.0 (Matching major and minor versions) A partial version range is treated as an X-Range, so the special character is in fact optional. \"\" (empty string) := * := >=0.0.0 1 := 1.x.x := >=1.0.0 <2.0.0 1.2 := 1.2.x := >=1.2.0 <1.3.0 Tilde Ranges ~1.2.3 ~1.2 ~1 Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not. ~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0 ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (Same as 1.2.x) ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (Same as 1.x) ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0 ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0 (Same as 0.2.x) ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0 (Same as 0.x) ~1.2.3-beta.2 := >=1.2.3-beta.2 <1.3.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. Caret Ranges ^1.2.3 ^0.2.5 ^0.0.4 Allows changes that do not modify the left-most non-zero element in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0, and no updates for versions 0.0.X. Many authors treat a 0.x version as if the x were the major \"breaking-change\" indicator. Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice. However, it presumes that there will not be breaking changes between 0.2.4 and 0.2.5. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices. ^1.2.3 := >=1.2.3 <2.0.0 ^0.2.3 := >=0.2.3 <0.3.0 ^0.0.3 := >=0.0.3 <0.0.4 ^1.2.3-beta.2 := >=1.2.3-beta.2 <2.0.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. ^0.0.3-beta := >=0.0.3-beta <0.0.4 Note that prereleases in the 0.0.3 version only will be allowed, if they are greater than or equal to beta. So, 0.0.3-pr.2 would be allowed. When parsing caret ranges, a missing patch value desugars to the number 0, but will allow flexibility within that value, even if the major and minor versions are both 0. ^1.2.x := >=1.2.0 <2.0.0 ^0.0.x := >=0.0.0 <0.1.0 ^0.0 := >=0.0.0 <0.1.0 A missing minor and patch values will desugar to zero, but also allow flexibility within those values, even if the major version is zero. ^1.x := >=1.0.0 <2.0.0 ^0.x := >=0.0.0 <1.0.0 Range Grammar Putting all this together, here is a Backus-Naur grammar for ranges, for the benefit of parser authors: range-set ::= range ( logical-or range ) * logical-or ::= ( ' ' ) * '||' ( ' ' ) * range ::= hyphen | simple ( ' ' simple ) * | '' hyphen ::= partial ' - ' partial simple ::= primitive | partial | tilde | caret primitive ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial partial ::= xr ( '.' xr ( '.' xr qualifier ? )? )? xr ::= 'x' | 'X' | '*' | nr nr ::= '0' | ['1'-'9'] ( ['0'-'9'] ) * tilde ::= '~' partial caret ::= '^' partial qualifier ::= ( '-' pre )? ( '+' build )? pre ::= parts build ::= parts parts ::= part ( '.' part ) * part ::= nr | [-0-9A-Za-z]+ Functions All methods and classes take a final options object argument. All options in this object are false by default. The options supported are: loose Be more forgiving about not-quite-valid semver strings. (Any resulting output will always be 100% strict compliant, of course.) For backwards compatibility reasons, if the options argument is a boolean value instead of an object, it is interpreted to be the loose param. includePrerelease Set to suppress the default behavior of excluding prerelease tagged versions from ranges unless they are explicitly opted into. Strict-mode Comparators and Ranges will be strict about the SemVer strings that they parse. valid(v): Return the parsed version, or null if it's not valid. inc(v, release): Return the version incremented by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if it's not valid premajor in one call will bump the version up to the next major version and down to a prerelease of that major version. preminor, and prepatch work the same way. If called from a non-prerelease version, the prerelease will work the same as prepatch. It increments the patch version, then makes a prerelease. If the input version is already a prerelease it simply increments it. prerelease(v): Returns an array of prerelease components, or null if none exist. Example: prerelease('1.2.3-alpha.1') -> ['alpha', 1] major(v): Return the major version number. minor(v): Return the minor version number. patch(v): Return the patch version number. intersects(r1, r2, loose): Return true if the two supplied ranges or comparators intersect. parse(v): Attempt to parse a string as a semantic version, returning either a SemVer object or null. Comparison gt(v1, v2): v1 > v2 gte(v1, v2): v1 >= v2 lt(v1, v2): v1 < v2 lte(v1, v2): v1 <= v2 eq(v1, v2): v1 == v2 This is true if they're logically equivalent, even if they're not the exact same string. You already know how to compare strings. neq(v1, v2): v1 != v2 The opposite of eq. cmp(v1, comparator, v2): Pass in a comparison string, and it'll call the corresponding function above. \"===\" and \"!==\" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided. compare(v1, v2): Return 0 if v1 == v2, or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort(). rcompare(v1, v2): The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort(). compareBuild(v1, v2): The same as compare but considers build when two versions are equal. Sorts in ascending order if passed to Array.sort(). v2 is greater. Sorts in ascending order if passed to Array.sort(). diff(v1, v2): Returns difference between two versions by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if the versions are the same. Comparators intersects(comparator): Return true if the comparators intersect Ranges validRange(range): Return the valid range or null if it's not valid satisfies(version, range): Return true if the version satisfies the range. maxSatisfying(versions, range): Return the highest version in the list that satisfies the range, or null if none of them do. minSatisfying(versions, range): Return the lowest version in the list that satisfies the range, or null if none of them do. minVersion(range): Return the lowest version that can possibly match the given range. gtr(version, range): Return true if version is greater than all the versions possible in the range. ltr(version, range): Return true if version is less than all the versions possible in the range. outside(version, range, hilo): Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<'. (This is the function called by gtr and ltr.) intersects(range): Return true if any of the ranges comparators intersect Note that, since ranges may be non-contiguous, a version might not be greater than a range, less than a range, or satisfy a range! For example, the range 1.2 <1.2.9 || >2.0.0 would have a hole from 1.2.9 until 2.0.0, so the version 1.2.10 would not be greater than the range (because 2.0.1 satisfies, which is higher), nor less than the range (since 1.2.8 satisfies, which is lower), and it also does not satisfy the range. If you want to know if a version satisfies or does not satisfy a range, use the satisfies(version, range) function. Coercion coerce(version, options): Coerces a string to semver if possible This aims to provide a very forgiving translation of a non-semver string to semver. It looks for the first digit in a string, and consumes all remaining characters which satisfy at least a partial semver (e.g., 1, 1.2, 1.2.3) up to the max permitted length (256 characters). Longer versions are simply truncated (4.6.3.9.2-alpha2 becomes 4.6.3). All surrounding text is simply ignored (v3.4 replaces v3.3.1 becomes 3.4.0). Only text which lacks digits will fail coercion (version one is not valid). The maximum length for any semver component considered for coercion is 16 characters; longer components will be ignored (10000000000000000.4.7.4 becomes 4.7.4). The maximum value for any semver component is Number.MAX_SAFE_INTEGER || (2**53 - 1); higher value components are invalid (9999999999999999.4.7.4 is likely invalid). If the options.rtl flag is set, then coerce will return the right-most coercible tuple that does not share an ending index with a longer coercible tuple. For example, 1.2.3.4 will return 2.3.4 in rtl mode, not 4.0.0. 1.2.3/4 will return 4.0.0, because the 4 is not a part of any other overlapping SemVer tuple. Clean clean(version): Clean a string to be a valid semver if possible This will return a cleaned and trimmed semver version. If the provided version is not valid a null will be returned. This does not work for ranges. ex. s.clean(' = v 2.1.5foo'): null s.clean(' = v 2.1.5foo', { loose: true }): '2.1.5-foo' s.clean(' = v 2.1.5-foo'): null s.clean(' = v 2.1.5-foo', { loose: true }): '2.1.5-foo' s.clean('=v2.1.5'): '2.1.5' s.clean(' =v2.1.5'): 2.1.5 s.clean(' 2.1.5 '): '2.1.5' s.clean('~1.0.0'): null Exported Modules You may pull in just the part of this semver utility that you need, if you are sensitive to packing and tree-shaking concerns. The main require('semver') export uses getter functions to lazily load the parts of the API that are used. The following modules are available: require('semver') require('semver/classes') require('semver/classes/comparator') require('semver/classes/range') require('semver/classes/semver') require('semver/functions/clean') require('semver/functions/cmp') require('semver/functions/coerce') require('semver/functions/compare') require('semver/functions/compare-build') require('semver/functions/compare-loose') require('semver/functions/diff') require('semver/functions/eq') require('semver/functions/gt') require('semver/functions/gte') require('semver/functions/inc') require('semver/functions/lt') require('semver/functions/lte') require('semver/functions/major') require('semver/functions/minor') require('semver/functions/neq') require('semver/functions/parse') require('semver/functions/patch') require('semver/functions/prerelease') require('semver/functions/rcompare') require('semver/functions/rsort') require('semver/functions/satisfies') require('semver/functions/sort') require('semver/functions/valid') require('semver/ranges/gtr') require('semver/ranges/intersects') require('semver/ranges/ltr') require('semver/ranges/max-satisfying') require('semver/ranges/min-satisfying') require('semver/ranges/min-version') require('semver/ranges/outside') require('semver/ranges/to-comparators') require('semver/ranges/valid')"
  },
  "node_modules/string_decoder/README.html": {
    "href": "node_modules/string_decoder/README.html",
    "title": "string_decoder",
    "keywords": "string_decoder Node-core v8.9.4 string_decoder for userland npm install --save string_decoder Node-core string_decoder for userland This package is a mirror of the string_decoder implementation in Node-core. Full documentation may be found on the Node.js website. As of version 1.0.0 string_decoder uses semantic versioning. Previous versions Previous version numbers match the versions found in Node core, e.g. 0.10.24 matches Node 0.10.24, likewise 0.11.10 matches Node 0.11.10. Update The build/ directory contains a build script that will scrape the source from the nodejs/node repo given a specific Node version. Streams Working Group string_decoder is maintained by the Streams Working Group, which oversees the development and maintenance of the Streams API within Node.js. The responsibilities of the Streams Working Group include: Addressing stream issues on the Node.js issue tracker. Authoring and editing stream documentation within the Node.js project. Reviewing changes to stream subclasses within the Node.js project. Redirecting changes to streams from the Node.js project to this project. Assisting in the implementation of stream providers within Node.js. Recommending versions of readable-stream to be included in Node.js. Messaging about the future of streams to give the community advance notice of changes. See readable-stream for more details."
  },
  "node_modules/supports-color/readme.html": {
    "href": "node_modules/supports-color/readme.html",
    "title": "supports-color",
    "keywords": "supports-color Detect whether a terminal supports color Install $ npm install supports-color Usage const supportsColor = require('supports-color'); if (supportsColor.stdout) { console.log('Terminal stdout supports color'); } if (supportsColor.stdout.has256) { console.log('Terminal stdout supports 256 colors'); } if (supportsColor.stderr.has16m) { console.log('Terminal stderr supports 16 million colors (truecolor)'); } API Returns an Object with a stdout and stderr property for testing either streams. Each property is an Object, or false if color is not supported. The stdout/stderr objects specifies a level of support for color through a .level property and a corresponding flag: .level = 1 and .hasBasic = true: Basic color support (16 colors) .level = 2 and .has256 = true: 256 color support .level = 3 and .has16m = true: Truecolor support (16 million colors) Info It obeys the --color and --no-color CLI flags. Can be overridden by the user with the flags --color and --no-color. For situations where using --color is not possible, add the environment variable FORCE_COLOR=1 to forcefully enable color or FORCE_COLOR=0 to forcefully disable. The use of FORCE_COLOR overrides all other color support checks. Explicit 256/Truecolor mode can be enabled using the --color=256 and --color=16m flags, respectively. Related supports-color-cli - CLI for this module chalk - Terminal string styling done right Maintainers Sindre Sorhus Josh Junon License MIT"
  },
  "node_modules/through2/LICENSE.html": {
    "href": "node_modules/through2/LICENSE.html",
    "title": "The MIT License (MIT)",
    "keywords": "The MIT License (MIT) Copyright (c) Rod Vagg (the \"Original Author\") and additional contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "node_modules/through2/README.html": {
    "href": "node_modules/through2/README.html",
    "title": "through2",
    "keywords": "through2 A tiny wrapper around Node.js streams.Transform (Streams2/3) to avoid explicit subclassing noise Inspired by Dominic Tarr's through in that it's so much easier to make a stream out of a function than it is to set up the prototype chain properly: through(function (chunk) { ... }). fs.createReadStream('ex.txt') .pipe(through2(function (chunk, enc, callback) { for (let i = 0; i < chunk.length; i++) if (chunk[i] == 97) chunk[i] = 122 // swap 'a' for 'z' this.push(chunk) callback() })) .pipe(fs.createWriteStream('out.txt')) .on('finish', () => doSomethingSpecial()) Or object streams: const all = [] fs.createReadStream('data.csv') .pipe(csv2()) .pipe(through2.obj(function (chunk, enc, callback) { const data = { name : chunk[0] , address : chunk[3] , phone : chunk[10] } this.push(data) callback() })) .on('data', (data) => { all.push(data) }) .on('end', () => { doSomethingSpecial(all) }) Note that through2.obj(fn) is a convenience wrapper around through2({ objectMode: true }, fn). Do you need this? Since Node.js introduced Simplified Stream Construction, many uses of through2 have become redundant. Consider whether you really need to use through2 or just want to use the 'readable-stream' package, or the core 'stream' package (which is derived from 'readable-stream'): const { Transform } = require('readable-stream') const transformer = new Transform({ transform(chunk, enc, callback) { // ... } }) API through2([ options, ] [ transformFunction ] [, flushFunction ]) Consult the stream.Transform documentation for the exact rules of the transformFunction (i.e. this._transform) and the optional flushFunction (i.e. this._flush). options The options argument is optional and is passed straight through to stream.Transform. So you can use objectMode:true if you are processing non-binary streams (or just use through2.obj()). The options argument is first, unlike standard convention, because if I'm passing in an anonymous function then I'd prefer for the options argument to not get lost at the end of the call: fs.createReadStream('/tmp/important.dat') .pipe(through2({ objectMode: true, allowHalfOpen: false }, (chunk, enc, cb) => { cb(null, 'wut?') // note we can use the second argument on the callback // to provide data as an alternative to this.push('wut?') } )) .pipe(fs.createWriteStream('/tmp/wut.txt')) transformFunction The transformFunction must have the following signature: function (chunk, encoding, callback) {}. A minimal implementation should call the callback function to indicate that the transformation is done, even if that transformation means discarding the chunk. To queue a new chunk, call this.push(chunk)‚Äîthis can be called as many times as required before the callback() if you have multiple pieces to send on. Alternatively, you may use callback(err, chunk) as shorthand for emitting a single chunk or an error. If you do not provide a transformFunction then you will get a simple pass-through stream. flushFunction The optional flushFunction is provided as the last argument (2nd or 3rd, depending on whether you've supplied options) is called just prior to the stream ending. Can be used to finish up any processing that may be in progress. fs.createReadStream('/tmp/important.dat') .pipe(through2( (chunk, enc, cb) => cb(null, chunk), // transform is a noop function (cb) { // flush function this.push('tacking on an extra buffer to the end'); cb(); } )) .pipe(fs.createWriteStream('/tmp/wut.txt')); through2.ctor([ options, ] transformFunction[, flushFunction ]) Instead of returning a stream.Transform instance, through2.ctor() returns a constructor for a custom Transform. This is useful when you want to use the same transform logic in multiple instances. const FToC = through2.ctor({objectMode: true}, function (record, encoding, callback) { if (record.temp != null && record.unit == \"F\") { record.temp = ( ( record.temp - 32 ) * 5 ) / 9 record.unit = \"C\" } this.push(record) callback() }) // Create instances of FToC like so: const converter = new FToC() // Or: const converter = FToC() // Or specify/override options when you instantiate, if you prefer: const converter = FToC({objectMode: true}) License through2 is Copyright ¬© Rod Vagg and additional contributors and licensed under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details."
  },
  "node_modules/to-regex-range/README.html": {
    "href": "node_modules/to-regex-range/README.html",
    "title": "to-regex-range",
    "keywords": "to-regex-range Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions. Please consider following this project's author, Jon Schlinkert, and consider starring the project to show your ‚ù§Ô∏è and support. Install Install with npm: $ npm install --save to-regex-range What does this do? This libary generates the source string to be passed to new RegExp() for matching a range of numbers. Example const toRegexRange = require('to-regex-range'); const regex = new RegExp(toRegexRange('15', '95')); A string is returned so that you can do whatever you need with it before passing it to new RegExp() (like adding ^ or $ boundaries, defining flags, or combining it another string). Why use this library? Convenience Creating regular expressions for matching numbers gets deceptively complicated pretty fast. For example, let's say you need a validation regex for matching part of a user-id, postal code, social security number, tax id, etc: regex for matching 1 => /1/ (easy enough) regex for matching 1 through 5 => /[1-5]/ (not bad...) regex for matching 1 or 5 => /(1|5)/ (still easy...) regex for matching 1 through 50 => /([1-9]|[1-4][0-9]|50)/ (uh-oh...) regex for matching 1 through 55 => /([1-9]|[1-4][0-9]|5[0-5])/ (no prob, I can do this...) regex for matching 1 through 555 => /([1-9]|[1-9][0-9]|[1-4][0-9]{2}|5[0-4][0-9]|55[0-5])/ (maybe not...) regex for matching 0001 through 5555 => /(0{3}[1-9]|0{2}[1-9][0-9]|0[1-9][0-9]{2}|[1-4][0-9]{3}|5[0-4][0-9]{2}|55[0-4][0-9]|555[0-5])/ (okay, I get the point!) The numbers are contrived, but they're also really basic. In the real world you might need to generate a regex on-the-fly for validation. Learn more If you're interested in learning more about character classes and other regex features, I personally have always found regular-expressions.info to be pretty useful. Heavily tested As of April 07, 2019, this library runs >1m test assertions against generated regex-ranges to provide brute-force verification that results are correct. Tests run in ~280ms on my MacBook Pro, 2.5 GHz Intel Core i7. Optimized Generated regular expressions are optimized: duplicate sequences and character classes are reduced using quantifiers smart enough to use ? conditionals when number(s) or range(s) can be positive or negative uses fragment caching to avoid processing the same exact string more than once Usage Add this library to your javascript application with the following line of code const toRegexRange = require('to-regex-range'); The main export is a function that takes two integers: the min value and max value (formatted as strings or numbers). const source = toRegexRange('15', '95'); //=> 1[5-9]|[2-8][0-9]|9[0-5] const regex = new RegExp(`^${source}$`); console.log(regex.test('14')); //=> false console.log(regex.test('50')); //=> true console.log(regex.test('94')); //=> true console.log(regex.test('96')); //=> false Options options.capture Type: boolean Deafault: undefined Wrap the returned value in parentheses when there is more than one regex condition. Useful when you're dynamically generating ranges. console.log(toRegexRange('-10', '10')); //=> -[1-9]|-?10|[0-9] console.log(toRegexRange('-10', '10', { capture: true })); //=> (-[1-9]|-?10|[0-9]) options.shorthand Type: boolean Deafault: undefined Use the regex shorthand for [0-9]: console.log(toRegexRange('0', '999999')); //=> [0-9]|[1-9][0-9]{1,5} console.log(toRegexRange('0', '999999', { shorthand: true })); //=> \\d|[1-9]\\d{1,5} options.relaxZeros Type: boolean Default: true This option relaxes matching for leading zeros when when ranges are zero-padded. const source = toRegexRange('-0010', '0010'); const regex = new RegExp(`^${source}$`); console.log(regex.test('-10')); //=> true console.log(regex.test('-010')); //=> true console.log(regex.test('-0010')); //=> true console.log(regex.test('10')); //=> true console.log(regex.test('010')); //=> true console.log(regex.test('0010')); //=> true When relaxZeros is false, matching is strict: const source = toRegexRange('-0010', '0010', { relaxZeros: false }); const regex = new RegExp(`^${source}$`); console.log(regex.test('-10')); //=> false console.log(regex.test('-010')); //=> false console.log(regex.test('-0010')); //=> true console.log(regex.test('10')); //=> false console.log(regex.test('010')); //=> false console.log(regex.test('0010')); //=> true Examples Range Result Compile time toRegexRange(-10, 10) -[1-9]\\|-?10\\|[0-9] 132Œºs toRegexRange(-100, -10) -1[0-9]\\|-[2-9][0-9]\\|-100 50Œºs toRegexRange(-100, 100) -[1-9]\\|-?[1-9][0-9]\\|-?100\\|[0-9] 42Œºs toRegexRange(001, 100) 0{0,2}[1-9]\\|0?[1-9][0-9]\\|100 109Œºs toRegexRange(001, 555) 0{0,2}[1-9]\\|0?[1-9][0-9]\\|[1-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5] 51Œºs toRegexRange(0010, 1000) 0{0,2}1[0-9]\\|0{0,2}[2-9][0-9]\\|0?[1-9][0-9]{2}\\|1000 31Œºs toRegexRange(1, 50) [1-9]\\|[1-4][0-9]\\|50 24Œºs toRegexRange(1, 55) [1-9]\\|[1-4][0-9]\\|5[0-5] 23Œºs toRegexRange(1, 555) [1-9]\\|[1-9][0-9]\\|[1-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5] 30Œºs toRegexRange(1, 5555) [1-9]\\|[1-9][0-9]{1,2}\\|[1-4][0-9]{3}\\|5[0-4][0-9]{2}\\|55[0-4][0-9]\\|555[0-5] 43Œºs toRegexRange(111, 555) 11[1-9]\\|1[2-9][0-9]\\|[2-4][0-9]{2}\\|5[0-4][0-9]\\|55[0-5] 38Œºs toRegexRange(29, 51) 29\\|[34][0-9]\\|5[01] 24Œºs toRegexRange(31, 877) 3[1-9]\\|[4-9][0-9]\\|[1-7][0-9]{2}\\|8[0-6][0-9]\\|87[0-7] 32Œºs toRegexRange(5, 5) 5 8Œºs toRegexRange(5, 6) 5\\|6 11Œºs toRegexRange(1, 2) 1\\|2 6Œºs toRegexRange(1, 5) [1-5] 15Œºs toRegexRange(1, 10) [1-9]\\|10 22Œºs toRegexRange(1, 100) [1-9]\\|[1-9][0-9]\\|100 25Œºs toRegexRange(1, 1000) [1-9]\\|[1-9][0-9]{1,2}\\|1000 31Œºs toRegexRange(1, 10000) [1-9]\\|[1-9][0-9]{1,3}\\|10000 34Œºs toRegexRange(1, 100000) [1-9]\\|[1-9][0-9]{1,4}\\|100000 36Œºs toRegexRange(1, 1000000) [1-9]\\|[1-9][0-9]{1,5}\\|1000000 42Œºs toRegexRange(1, 10000000) [1-9]\\|[1-9][0-9]{1,6}\\|10000000 42Œºs Heads up! Order of arguments When the min is larger than the max, values will be flipped to create a valid range: toRegexRange('51', '29'); Is effectively flipped to: toRegexRange('29', '51'); //=> 29|[3-4][0-9]|5[0-1] Steps / increments This library does not support steps (increments). A pr to add support would be welcome. History v2.0.0 - 2017-04-21 New features Adds support for zero-padding! v1.0.0 Optimizations Repeating ranges are now grouped using quantifiers. rocessing time is roughly the same, but the generated regex is much smaller, which should result in faster matching. Attribution Inspired by the python library range-regex. About Contributing Pull requests and stars are always welcome. For bugs and feature requests, please create an issue. Running Tests Running and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command: $ npm install && npm test Building docs (This project's readme.md is generated by verb, please don't edit the readme directly. Any changes to the readme must be made in the .verb.md readme template.) To generate the readme, run the following command: $ npm install -g verbose/verb#dev verb-generate-readme && verb Related projects You might also be interested in these projects: expand-range: Fast, bash-like range expansion. Expand a range of numbers or letters, uppercase or lowercase. Used‚Ä¶ more | homepage fill-range: Fill in a range of numbers or letters, optionally passing an increment or step to‚Ä¶ more | homepage micromatch: Glob matching for javascript/node.js. A drop-in replacement and faster alternative to minimatch and multimatch. | homepage repeat-element: Create an array by repeating the given value n times. | homepage repeat-string: Repeat the given string n times. Fastest implementation for repeating a string. | homepage Contributors Commits Contributor 63 jonschlinkert 3 doowb 2 realityking Author Jon Schlinkert GitHub Profile Twitter Profile LinkedIn Profile Please consider supporting me on Patreon, or start your own Patreon page! License Copyright ¬© 2019, Jon Schlinkert. Released under the MIT License. This file was generated by verb-generate-readme, v0.8.0, on April 07, 2019."
  },
  "node_modules/touch/README.html": {
    "href": "node_modules/touch/README.html",
    "title": "node-touch",
    "keywords": "node-touch For all your node touching needs. Installing npm install touch CLI Usage: See man touch This package exports a binary called nodetouch that works mostly like the unix builtin touch(1). API Usage: var touch = require(\"touch\") Gives you the following functions: touch(filename, options, cb) touch.sync(filename, options) touch.ftouch(fd, options, cb) touch.ftouchSync(fd, options) All the options objects are optional. All the async functions return a Promise. If a callback function is provided, then it's attached to the Promise. Options force like touch -f Boolean time like touch -t <date> Can be a Date object, or any parseable Date string, or epoch ms number. atime like touch -a Can be either a Boolean, or a Date. mtime like touch -m Can be either a Boolean, or a Date. ref like touch -r <file> Must be path to a file. nocreate like touch -c Boolean If neither atime nor mtime are set, then both values are set. If one of them is set, then the other is not. cli This package creates a nodetouch command line executable that works very much like the unix builtin touch(1)"
  },
  "node_modules/undefsafe/README.html": {
    "href": "node_modules/undefsafe/README.html",
    "title": "undefsafe",
    "keywords": "undefsafe Simple function for retrieving deep object properties without getting \"Cannot read property 'X' of undefined\" Can also be used to safely set deep values. Usage var object = { a: { b: { c: 1, d: [1,2,3], e: 'remy' } } }; console.log(undefsafe(object, 'a.b.e')); // \"remy\" console.log(undefsafe(object, 'a.b.not.found')); // undefined Demo: https://jsbin.com/eroqame/3/edit?js,console Setting var object = { a: { b: [1,2,3] } }; // modified object var res = undefsafe(object, 'a.b.0', 10); console.log(object); // { a: { b: [10, 2, 3] } } console.log(res); // 1 - previous value Star rules in paths As of 1.2.0, undefsafe supports a * in the path if you want to search all of the properties (or array elements) for a particular element. The function will only return a single result, either the 3rd argument validation value, or the first positive match. For example, the following github data: const githubData = { commits: [{ modified: [ \"one\", \"two\" ] }, /* ... */ ] }; // first modified file found in the first commit console.log(undefsafe(githubData, 'commits.*.modified.0')); // returns `two` or undefined if not found console.log(undefsafe(githubData, 'commits.*.modified.*', 'two'));"
  },
  "node_modules/util-deprecate/History.html": {
    "href": "node_modules/util-deprecate/History.html",
    "title": "1.0.2 / 2015-10-07",
    "keywords": "1.0.2 / 2015-10-07 use try/catch when checking localStorage (#3, @kumavis) 1.0.1 / 2014-11-25 browser: use console.warn() for deprecation calls browser: more jsdocs 1.0.0 / 2014-04-30 initial commit"
  },
  "node_modules/util-deprecate/README.html": {
    "href": "node_modules/util-deprecate/README.html",
    "title": "util-deprecate",
    "keywords": "util-deprecate The Node.js util.deprecate() function with browser support In Node.js, this module simply re-exports the util.deprecate() function. In the web browser (i.e. via browserify), a browser-specific implementation of the util.deprecate() function is used. API A deprecate() function is the only thing exposed by this module. // setup: exports.foo = deprecate(foo, 'foo() is deprecated, use bar() instead'); // users see: foo(); // foo() is deprecated, use bar() instead foo(); foo(); License (The MIT License) Copyright (c) 2014 Nathan Rajlich nathan@tootallnate.net Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}